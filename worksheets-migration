

-- CONTRACTS
-- HBHP DOCUMENTS MIGRATION

--linux command: 
--copy file from ec2 root to s3
aws s3 cp ~/extract-procon.py s3://wpl-wrk-cds-np-unzip-bucket/ec2/
--copy file from s3 to ec2 root
aws s3 cp s3://wpl-wrk-cds-np-unzip-bucket/ec2/01-pro-hbhp-procon-files.csv ~/ 
aws s3 cp s3://wpl-wrk-cds-np-unzip-bucket/ec2/prod-hbhp-moveto-s3.sh ~/
aws s3 cp s3://wpl-wrk-cds-np-unzip-bucket/ec2/prod-hbhp-comm-zip.csv ~/
aws s3 cp s3://wpl-wrk-cds-np-unzip-bucket/ec2/prod-hbhp-blob.csv ~/
aws s3 cp s3://wpl-wrk-cds-np-unzip-bucket/ec2/prod_procon_hbhp_tenders_files.csv ~/
-- sync zip from ec2 to s3
aws s3 sync ~/procon-hbhp/ s3://wpl-wrk-cds-np-unzip-bucket/procon-hbhp-extract/
aws s3 sync ~/procon-hbhp/zip-prod/ s3://wpl-wrk-cds-np-unzip-bucket/procon-hbhp-extract/zip-prod/
-- sync ec2 blob to s3 blob
aws s3 sync ~/blob/procon-hbhp/ s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/prod-procon-hbhp/

-- sync blob fixes
aws s3 sync s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/gcms-hbhp-add/ s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/gcms-hbhp/
aws s3 sync s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/procon-hbhp-add/ s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/procon-hbhp/

-- sync archive
aws s3 sync ~/procon-hbhp-tenders/ s3://wpl-wrk-cds-np-unzip-bucket/archive/hbhp-tenders/
aws s3 sync s3://wpl-wrk-cds-np-unzip-bucket/procon-hbhp-extract/ s3://wpl-wrk-cds-np-unzip-bucket/archive/hbhp/

-- REPORT
aws s3 ls s3://wpl-wrk-cds-np-unzip-bucket/procon-hbhp-extract/zip-prod/ --recursive > c:\temp\prod-hbhp-zip.txt
aws s3 ls s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/prod-procon-hbhp/ --recursive > c:\temp\prod-hbhp-blob.txt


python3 extract-procon.py -f 01-pro-hbhp-procon-files.csv
python3 extract-procon.py -f prod_procon_hbhp_tenders_files.csv

nohup  python3 aws_s3_copy_files.py -f prod-hbhp-blob.csv > prod-load-to-blob-hbhp.out


-- clone table before start extracting

CREATE TABLE IF NOT EXISTS SANDBOX.PROJECT_ICLMS.CLMS_DOCUMENTS_CLONE_20250304
  CLONE SANDBOX.PROJECT_ICLMS.CLMS_DOCUMENTS



1. Populate CLMS_DOCUMENTS table - make sure all contracts listed in the VIEW are copied and no duplication.

INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_DOC_ID, LEGACY_FILENAME, LEGACY_SYSTEM, LEGACY_ORG,	
	SOURCE_TYPE, LEGACY_DOCUMENT_CATEGORY, NEW_DOCUMENT_CATEGORY, MODIFIED_FILENAME,
	SELECTED_FOR_MIGRATION, BLOB_FILENAME, SOURCE_PATH, S3_PATH, BLOB_PATH, FILE_SIZE_BYTES, 
	FILE_VERSION, LATEST_VERSION, LAST_MODIFIED
)
SELECT 
CONTRACTPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 'PROCON' AS LEGACY_SYSTEM, LEGACY_ORG, 
'API' AS SOURCE_TYPE, DOCUMENT_TYPE, NEWDOCTYPE, FILENAME, 
FALSE AS selected_for_migration,  NULL blobfilename, NULL sourcepath,  NULL s3path, NULL blobpath, FILESIZE,
FILEVERSIONNUMBER, LATEST_VERSION, LASTMODIFIED,
FROM (
	SELECT DISTINCT CONTRACTPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 
	CASE WHEN EXTRACT_TYPE LIKE '%BHP%' THEN 'HBHP' 
		ELSE 'HWEL' 
	END AS LEGACY_ORG, 
	DOCUMENT_TYPE,
	CASE 
		WHEN DOCUMENT_TYPE = '01 Library Items' AND UPPER(FILEEXTENSION) = 'PDF' THEN 'Executed Version (pdf)'
		WHEN DOCUMENT_TYPE = '01 Library Items' AND UPPER(FILEEXTENSION) != 'PDF' THEN 'Supporting Documents'
		WHEN DOCUMENT_TYPE = '02 Risk Covers' THEN 'Contract Risk Cover'
		WHEN DOCUMENT_TYPE IN ('03 Internal Communications', '04 External Communications', '05 Communication State Transitions') THEN 'Legacy Communication'
		ELSE NULL 
	END AS NEWDOCTYPE, 
	COALESCE(MODIFIED_FILENAME, API_FILENAME) AS FILENAME,
	FILESIZE,
	COALESCE(FILEVERSIONNUMBER,'0') AS FILEVERSIONNUMBER ,
	LATEST_VERSION,
	LASTMODIFIED
	FROM PROCON_DOCUMENTS_VW
	WHERE extract_type = 'PH4_HBHP' 
) 
-- excluce files that already in the table to avoid duplication
WHERE FILEPROCONID NOT IN (
	SELECT COALESCE(LEGACY_DOC_ID,'') 
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'PROCON' 
	AND LEGACY_ORG = 'HBHP'
	AND NEW_DOCUMENT_CATEGORY != 'Tenders'
);

2. UPDATE missing informations (Blob, S3, NEWDOCTYPE etc)


3. ZIP

-- Generate a list for HBHP COMMS ZIP FILES
SELECT vw.LEGACY_CONTRACT_NO, vw.FILEPROCONID, vw.LEGACY_COMM_TYPE, 
	CONCAT(vw.LEGACY_CONTRACT_NO,'/',cd.LEGACY_DOCUMENT_CATEGORY,'/',cd.MODIFIED_FILENAME) AS SOURCE_FILE, 
	REPLACE(ZIP_FILE,'/','_') AS ZIP_FILE
	--, cd.MODIFIED_FILENAME, vw.SOURCE_FILE 
FROM PROCON_DOCUMENTS_COMM_ZIP_VW vw
JOIN CLMS_DOCUMENTS cd
	ON vw.LEGACY_CONTRACT_NO = cd.LEGACY_CONTRACT_REFERENCE 
	AND vw.FILEPROCONID =cd.LEGACY_DOC_ID 
WHERE vw.EXTRACT_TYPE = ( SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HBHP_VW )
AND cd.LEGACY_ORG = 'HBHP'


/* Insert list of generated ZIP files into clms documents (HBHP) */ 
INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_FILENAME,LEGACY_SYSTEM,LEGACY_ORG,
	SOURCE_TYPE,LEGACY_DOCUMENT_CATEGORY,NEW_DOCUMENT_CATEGORY, NEW_CONTRACT_TYPE, SELECTED_FOR_MIGRATION,
	MODIFIED_FILENAME,S3_PATH, LATEST_VERSION
)
SELECT DISTINCT 
      LEGACY_CONTRACT_REFERENCE
	, ZIP_FILENAME LEGACY_FILENAME
	, LEGACY_SYSTEM
	, LEGACY_ORG
	, 'ZIP' SOURCE_TYPE
	, LEGACY_DOCUMENT_CATEGORY
	, NEW_DOCUMENT_CATEGORY
	, NEW_CONTRACT_TYPE
	, FALSE SELECTED_FOR_MIGRATION
	, ZIP_FILENAME MODIFIED_FILENAME
	, CONCAT('procon-hbhp-extract/zip/',ZIP_FILENAME) AS S3_PATH
	, TRUE LATEST_VERSION
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HWEL' 
AND LEGACY_SYSTEM = 'PROCON'
--AND NEW_DOCUMENT_CATEGORY ='Legacy Communication'
AND ZIP_FILENAME IS NOT NULL
AND ZIP_FILENAME NOT IN (
	SELECT DISTINCT MODIFIED_FILENAME
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP' 
	AND SOURCE_TYPE = 'ZIP'   
)
ORDER BY LEGACY_CONTRACT_REFERENCE;


-- remove existing zip files
DELETE FROM CLMS_DOCUMENTS
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND SOURCE_TYPE = 'ZIP';   

-- reset zip_filename	
UPDATE CLMS_DOCUMENTS cd 
SET ZIP_FILENAME = NULL
WHERE cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON';

MERGE INTO CLMS_DOCUMENTS y
USING (	
	SELECT cd.UID, vw.LEGACY_CONTRACT_NO, vw.FILEPROCONID, vw.LEGACY_COMM_TYPE, vw.COMMUNICATIONPROCONREFERENCE, 
		CONCAT(vw.LEGACY_CONTRACT_NO,'/',cd.LEGACY_DOCUMENT_CATEGORY,'/',cd.MODIFIED_FILENAME) AS SOURCE_FILE, 
		REPLACE(ZIP_FILE,'/','_') AS ZIP_FILE
	FROM PROCON_COMM_ZIP_STAGING vw
	JOIN CLMS_DOCUMENTS cd 
	ON cd.LEGACY_CONTRACT_REFERENCE = vw.LEGACY_CONTRACT_NO
	AND cd.LEGACY_DOC_ID = vw.FILEPROCONID 
	AND cd.LEGACY_ORG = 'HBHP'
	AND cd.LEGACY_SYSTEM = 'PROCON'
	AND vw.EXTRACT_TYPE = ( SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HBHP_VW )
	ORDER BY 5
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
y.ZIP_FILENAME = x.ZIP_FILE
, y.FILE_GROUP_ID = x.COMMUNICATIONPROCONREFERENCE;



INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_FILENAME,LEGACY_SYSTEM,LEGACY_ORG,
	SOURCE_TYPE,LEGACY_DOCUMENT_CATEGORY,NEW_DOCUMENT_CATEGORY, NEW_CONTRACT_TYPE, SELECTED_FOR_MIGRATION,
	MODIFIED_FILENAME,S3_PATH, LATEST_VERSION
)
SELECT DISTINCT 
      LEGACY_CONTRACT_REFERENCE
	, ZIP_FILENAME LEGACY_FILENAME
	, LEGACY_SYSTEM
	, LEGACY_ORG
	, 'ZIP' SOURCE_TYPE
	, LEGACY_DOCUMENT_CATEGORY
	, NEW_DOCUMENT_CATEGORY
	, NEW_CONTRACT_TYPE
	, FALSE SELECTED_FOR_MIGRATION
	, ZIP_FILENAME MODIFIED_FILENAME
	, CONCAT('procon-hbhp-extract/zip/',ZIP_FILENAME) AS S3_PATH
	, TRUE LATEST_VERSION
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND ZIP_FILENAME IS NOT NULL
AND ZIP_FILENAME NOT IN (
	SELECT DISTINCT MODIFIED_FILENAME
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP' 
	AND LEGACY_SYSTEM = 'PROCON'
	AND SOURCE_TYPE = 'ZIP'   
)
ORDER BY LEGACY_CONTRACT_REFERENCE;

UPDATE CLMS_DOCUMENTS
SET S3_PATH = REPLACE(S3_PATH,'/zip/','/zip-prod/')
, LEGACY_DOC_ID = UID::TEXT
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND SOURCE_TYPE = 'ZIP';


-- update the zip file size
MERGE INTO CLMS_DOCUMENTS y
USING (
	SELECT cd.UID, cd.LEGACY_FILENAME, cd.MODIFIED_FILENAME,  z.FILE_SIZE_BYTES 
	FROM  SANDBOX.USER_RADY_ENDRASMORO.PROCON_HBHP_ZIP z
	JOIN CLMS_DOCUMENTS cd ON cd.LEGACY_FILENAME = z.ZIP_FILENAME 
	AND cd.FILE_SIZE_BYTES IS NULL
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 
y.FILE_SIZE_BYTES = x.FILE_SIZE_BYTES;


-- Update Replacement File for HWEL file > 200MB selected from migration
UPDATE CLMS_DOCUMENTS cd
SET REPLACEMENT_FILE = 
CASE cd.NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		END || '/Association Replacements/' || BLOB_FILENAME
WHERE cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.FILE_SIZE_BYTES/(1024*1000) >= 200
AND cd.NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 

-- Dummy file is TRUE when use replacenament file
UPDATE CLMS_DOCUMENTS
SET USE_DUMMY_FILE = TRUE
WHERE LEGACY_ORG = 'HBHP'
AND LEGACY_SYSTEM = 'PROCON'
AND REPLACEMENT_FILE IS NOT NULL
AND NEW_DOCUMENT_CATEGORY  != 'Tenders'

-- file group id
MERGE INTO CLMS_DOCUMENTS y
USING (	
	WITH  comms AS (
		SELECT comm.CONTRACTPROCONREFERENCE, 
		comm.COMMUNICATIONPROCONID,
		comm.COMMUNICATIONPROCONREFERENCE,
		comm.COMMUNICATIONTITLE,
		comm.COMMUNICATIONTEMPLATETITLE,
		'Legacy Communications - ' || 
		CASE WHEN upper(trim(comm.ROUTINGPATH)) = 'INTERNALTOCOMPANY' 
			THEN 'Internal' ELSE 'External' 
		END AS Legacy_Comm_Type,
		att.FILEPROCONID, 
		att.FILEFULLNAME, 
		att.FILEEXTENSION, 
		att.PARENTPROCONID, 
		att.PARENTTYPE, 
		att.UPLOADEDON, 
		att.LASTMODIFIED, 
		att.EXTRACT_TYPE,
		att.FILESIZE
		FROM clean_current_procon_communications_attachments att
		JOIN clean_current_procon_post_awards_communications comm
		ON att.parentproconid = comm.COMMUNICATIONPROCONID 
		AND att.extract_type = comm.extract_type 
	)
	,valid_comms AS (
		SELECT DISTINCT c.LEGACY_CONTRACT_REFERENCE, m.COMMUNICATIONPROCONID, c.SOURCE,
		m.LEGACY_COMM_TYPE, m.COMMUNICATIONPROCONREFERENCE, m.FILEPROCONID, m.FILESIZE, 
		m.COMMUNICATIONTEMPLATETITLE, m.FILEFULLNAME
		FROM VALID_CONTRACTS_VW c 
		LEFT JOIN comms m 
		ON c.LEGACY_CONTRACT_REFERENCE=m.CONTRACTPROCONREFERENCE
		WHERE m.COMMUNICATIONPROCONREFERENCE IS NOT NULL

	)
	SELECT cd.UID, cd.MODIFIED_FILENAME, FILE_GROUP_ID, vc.COMMUNICATIONPROCONREFERENCE 
	FROM valid_comms vc
	JOIN CLMS_DOCUMENTS cd 
	ON cd.LEGACY_CONTRACT_REFERENCE = vc.LEGACY_CONTRACT_REFERENCE
	AND cd.LEGACY_DOC_ID = vc.FILEPROCONID
	AND cd.LEGACY_ORG = 'HBHP'
	AND vc.SOURCE ='HBHP'
	AND COALESCE(cd.FILE_GROUP_ID,'') <>  vc.COMMUNICATIONPROCONREFERENCE
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
Y.FILE_GROUP_ID = x.COMMUNICATIONPROCONREFERENCE


--file group id for Communication State Transitions
MERGE INTO CLMS_DOCUMENTS y
USING (	
WITH state_comms AS (
		SELECT stf.FILEPROCONID,
		comm.CONTRACTPROCONREFERENCE, 
		comm.COMMUNICATIONPROCONID,
		comm.COMMUNICATIONPROCONREFERENCE
		FROM CLEAN_CURRENT_PROCON_COMMUNICATION_STATE_TRANSITIONS_FILES stf 
		JOIN CLEAN_CURRENT_PROCON_COMMUNICATIONS_COMMUNICATION_STATE_TRANSITIONS st
			ON st.COMMUNICATIONSTATETRANSITIONPROCONID = stf.PARENTPROCONID
			AND st.EXTRACT_TYPE = stf.EXTRACT_TYPE
		JOIN clean_current_procon_post_awards_communications comm
			ON comm.COMMUNICATIONPROCONID = stf.GRANDPARENTPROCONID
			AND comm.EXTRACT_TYPE = stf.EXTRACT_TYPE
		WHERE stf.EXTRACT_TYPE = 'PH5_HBHP'
)
SELECT cd.UID, cd.MODIFIED_FILENAME, sc.COMMUNICATIONPROCONREFERENCE 
FROM CLMS_DOCUMENTS cd 
JOIN state_comms sc
	ON cd.LEGACY_CONTRACT_REFERENCE = sc.CONTRACTPROCONREFERENCE
	AND cd.LEGACY_DOC_ID = sc.FILEPROCONID
	AND cd.LEGACY_ORG = 'HBHP'
	AND cd.FILE_GROUP_ID IS NULL
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
Y.FILE_GROUP_ID = x.COMMUNICATIONPROCONREFERENCE;

-- file group id for the zip files
UPDATE  CLMS_DOCUMENTS 
SET FILE_GROUP_ID = SPLIT_PART(LEGACY_FILENAME, '_', 2) 
WHERE LEGACY_SYSTEM = 'PROCON'
AND LEGACY_ORG = 'HBHP'
AND NEW_DOCUMENT_CATEGORY = 'Legacy Communication'
AND FILE_GROUP_ID IS NULL 
AND SOURCE_TYPE = 'ZIP';


--- HBHP SELECTED FOR MIGRATION ----------------

SELECT COUNT(*) -- uat : 3603  --> prod 4832
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND SELECTED_FOR_MIGRATION 

-- reset
UPDATE CLMS_DOCUMENTS 
SET SELECTED_FOR_MIGRATION = FALSE
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON';


UPDATE CLMS_DOCUMENTS cd
SET SELECTED_FOR_MIGRATION = TRUE
WHERE LEGACY_ORG = 'HBHP' 
--AND LEGACY_SYSTEM = 'PROCON'
AND cd.LEGACY_CONTRACT_REFERENCE IN (
	--SELECT DISTINCT CONTRACTPROCONREFERENCE 
	--FROM PROCON_HBHP_VALID_CONTRACTS_VW 
	--WHERE EXTRACT_TYPE = 'PH5_HBHP'
	SELECT LEGACY_CONTRACT_REFERENCE 
	FROM SANDBOX.PROJECT_ICLMS.VALID_CONTRACTS_VW
	--WHERE SOURCE IN ('HBHP', 'GCMS')
)
AND IS_SUPPORTED_FILE(LEGACY_FILENAME) 
AND ZIP_FILENAME IS NULL;


UPDATE CLMS_DOCUMENTS cd
SET BLOB_PATH = 
CASE cd.NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		END || '/'|| cd.NEW_DOCUMENT_CATEGORY  ||'/' 

, BLOB_FILENAME = CONCAT('Uid', cd.UID,'_', cd.MODIFIED_FILENAME)
WHERE cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 
AND (BLOB_FILENAME IS NULL OR BLOB_PATH IS NULL);


----------------------------------------

-- UPDATE BLOB_MAPPING_ID
MERGE INTO CLMS_DOCUMENTS cd
USING (
	WITH blob_mapping AS (
		SELECT *, CASE CONTRACT_TYPE WHEN 'Standard' THEN 'Standalone' ELSE CONTRACT_TYPE END AS NEW_CONTRACT_TYPE 
		FROM EXTERNAL_FILE_PROCON_HBHP_GCMS_MAPPING 
	)
	SELECT DISTINCT c.LEGACY_CONTRACT_REFERENCE,  c.LEGACY_SYSTEM, c.NEW_CONTRACT_TYPE, m.BLOB_MAPPING_ID
	FROM CLMS_DOCUMENTS c
	JOIN blob_mapping m 
		ON c.LEGACY_CONTRACT_REFERENCE = m.PROCON_ID
		AND c.NEW_CONTRACT_TYPE = m.NEW_CONTRACT_TYPE
		AND c.LEGACY_ORG = 'HBHP'
		AND c.LEGACY_SYSTEM = 'PROCON'
		AND c.NEW_DOCUMENT_CATEGORY != 'Tenders'
	UNION 
	SELECT DISTINCT c.LEGACY_CONTRACT_REFERENCE,  c.LEGACY_SYSTEM, c.NEW_CONTRACT_TYPE, m.BLOB_MAPPING_ID
	FROM CLMS_DOCUMENTS c
	JOIN blob_mapping m 
		ON c.LEGACY_CONTRACT_REFERENCE = m.GCMS_ID
		AND c.NEW_CONTRACT_TYPE = m.NEW_CONTRACT_TYPE
		AND c.LEGACY_ORG = 'HBHP'
		AND c.LEGACY_SYSTEM = 'GCMS'
		AND c.NEW_DOCUMENT_CATEGORY != 'Tenders'
) x
ON cd.LEGACY_CONTRACT_REFERENCE = x.LEGACY_CONTRACT_REFERENCE
AND cd.LEGACY_SYSTEM = x.LEGACY_SYSTEM
AND cd.NEW_CONTRACT_TYPE = x.NEW_CONTRACT_TYPE
WHEN MATCHED THEN UPDATE SET 
cd.BLOB_MAPPING_ID = x.BLOB_MAPPING_ID




-- check multiple executed pdf doco
SELECT LEGACY_CONTRACT_REFERENCE, COUNT(*)  
FROM CLMS_DOCUMENTS cd
WHERE cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 
AND cd.NEW_DOCUMENT_CATEGORY = 'Executed Version (pdf)'
GROUP BY LEGACY_CONTRACT_REFERENCE
HAVING COUNT(*) > 1;

-- fix  multiple executed pdf doco
UPDATE CLMS_DOCUMENTS cd
SET NEW_DOCUMENT_CATEGORY = 'Supporting Documents'
, BLOB_PATH = REPLACE(BLOB_PATH,'Executed Version (pdf)','Supporting Documents')
WHERE UID IN (1489297, 1489323, 1489227, 1489404);


--Check CLMS_DOCUMENTS readiness for HWEL before create blob files 
SELECT COUNT(*) 
FROM CLMS_DOCUMENTS cd
WHERE cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 
--AND LEGACY_CONTRACT_REFERENCE IS NULL 
--AND LEGACY_DOC_ID IS NULL
--AND NEW_CONTRACT_TYPE IS NULL
--AND (BLOB_FILENAME IS NULL OR BLOB_PATH IS NULL)
--AND MODIFIED_FILENAME IS NULL 
--AND (S3_PATH IS NULL AND SOURCE_PATH IS NULL)
--AND ((FILE_SIZE_BYTES/1024000)>=200 AND REPLACEMENT_FILE IS NULL)
--AND (REPLACEMENT_FILE IS NOT NULL AND USE_DUMMY_FILE = FALSE)
--AND NOT IS_SUPPORTED_FILE(cd.LEGACY_FILENAME) 
--AND ZIP_FILENAME IS NOT NULL
--AND FILE_SIZE_BYTES IS NULL





WITH blob AS (
	/* move as it is */
	SELECT S3_PATH AS SOURCE_PATH , 'load-to-blob/procon-hbhp/' || BLOB_PATH || BLOB_FILENAME AS Target_Path, 1 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND NOT USE_DUMMY_FILE
	UNION
	/* move original file to replacement folder */
	SELECT S3_PATH AS SOURCE_PATH , 'load-to-blob/procon-hbhp/' || REPLACEMENT_FILE AS Target_Path, 2 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND USE_DUMMY_FILE
	UNION
	/* dummy file for file gt 200 MB to document blob folder */
	SELECT CASE UPPER(RIGHT(S3_PATH,3)) 
		WHEN 'PDF' THEN 'scripts/dummy_file.pdf' 
		WHEN 'ZIP' THEN 'scripts/dummy_file.zip' 	
	END AS SOURCE_PATH 
	, 'load-to-blob/procon-hbhp/' || BLOB_PATH || BLOB_FILENAME AS Target_Path , 3 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND USE_DUMMY_FILE
	AND (FILE_SIZE_BYTES / (1024 * 1000)) >= 200
)
SELECT REPLACE(REPLACE(SOURCE_PATH, 'procon-hbhp-extract/','procon-hbhp/'),'scripts/','') AS "SourceFilePath" , 
REPLACE(TARGET_PATH, 'load-to-blob/','blob/') AS "TargetFilePath", 
ID, UID 
FROM blob


--------------------------------------- BLOB RECONCILIATION ----------------------------------------------------
-- aws s3 ls s3://wpl-wrk-cds-np-unzip-bucket/load-to-blob/prod-procon-hbhp/ --recursive > c:\temp\prod-hbhp-blob.txt

WITH usr_blob AS (
	SELECT 
	SPLIT_PART(BLOB_FILE,'/',1) AS BLOB_FOLDER,
	SPLIT_PART(BLOB_FILE,'/',2) AS DOCUMENT_CATEGORY,
	SPLIT_PART(BLOB_FILE,'/',3) AS BLOB_FILENAME,
	REPLACE(SPLIT_PART( SPLIT_PART(BLOB_FILE,'/',3),'_',1),'Uid','') AS UID
	FROM SANDBOX.USER_RADY_ENDRASMORO.PROCON_HBHP_BLOB
)
SELECT cd.* 
FROM CLMS_DOCUMENTS cd
LEFT JOIN usr_blob b
ON cd.UID = b.UID
AND cd.NEW_DOCUMENT_CATEGORY = b.DOCUMENT_CATEGORY
WHERE  cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.NEW_DOCUMENT_CATEGORY != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 
AND (
(cd.BLOB_FILENAME <> b.BLOB_FILENAME)
OR cd.BLOB_PATH <> b.BLOB_FOLDER||'/'||b.DOCUMENT_CATEGORY||'/'
);



SELECT * 
FROM CLMS_DOCUMENTS cd 
WHERE  cd.LEGACY_ORG = 'HBHP'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.NEW_DOCUMENT_CATEGORY != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 











-- ------------------------------------------ ARCHIVING --------------------------------------------------------------

-- Insert TENDERS documents into CLMS_DOCUMENTS
INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_DOC_ID, LEGACY_FILENAME, LEGACY_SYSTEM, LEGACY_ORG,	
	SOURCE_TYPE, LEGACY_DOCUMENT_CATEGORY, NEW_DOCUMENT_CATEGORY, MODIFIED_FILENAME,
	SELECTED_FOR_MIGRATION, BLOB_FILENAME, SOURCE_PATH, S3_PATH, BLOB_PATH, FILE_SIZE_BYTES, 
	FILE_VERSION, LATEST_VERSION, LAST_MODIFIED
)
SELECT TENDERPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 'PROCON' AS LEGACY_SYSTEM, LEGACY_ORG, 
'API' AS SOURCE_TYPE, DOCUMENT_TYPE, NEWDOCTYPE, FILENAME, 
FALSE AS selected_for_migration,  NULL blobfilename, NULL sourcepath,  NULL s3path, NULL blobpath, FILESIZE,
FILEVERSIONNUMBER, LATEST_VERSION, LASTMODIFIED,
FROM (
	SELECT DISTINCT TENDERPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 
	CASE WHEN EXTRACT_TYPE LIKE '%BHP%' THEN 'HBHP' 
		ELSE 'HWEL' 
	END AS LEGACY_ORG, 
	DOCUMENT_TYPE,
	'Tenders' AS NEWDOCTYPE, 
	COALESCE(MODIFIED_FILENAME, API_FILENAME) AS FILENAME,
	FILESIZE,
	COALESCE(FILEVERSIONNUMBER,'0') AS FILEVERSIONNUMBER ,
	LATEST_VERSION,
	LASTMODIFIED
	FROM PROCON_TENDER_DOCUMENTS_VW
	WHERE extract_type = 'PH5_HBHP' 
) 
-- excluce files that already in the table to avoid duplication
WHERE FILEPROCONID NOT IN (
	SELECT COALESCE(LEGACY_DOC_ID,'') 
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'PROCON' 
	AND LEGACY_ORG = 'HBHP'
);



-- Update S3_PATH
UPDATE CLMS_DOCUMENTS  
SET S3_PATH = CONCAT('archive/', LOWER(LEGACY_ORG),'-tenders','/',LEGACY_CONTRACT_REFERENCE,'/',LEGACY_DOCUMENT_CATEGORY,'/',MODIFIED_FILENAME)
WHERE LEGACY_SYSTEM = 'PROCON'
AND LEGACY_ORG = 'HBHP'
AND NEW_DOCUMENT_CATEGORY = 'Tenders';


-- USE FOR LINUX API EXTRACT 
SELECT 
ROW_NUMBER() OVER(ORDER BY UID) SEQ
, LEGACY_CONTRACT_REFERENCE CONTRACTPROCONREFERENCE
, LEGACY_DOC_ID FILEPROCONID
, MODIFIED_FILENAME API_FILENAME
, LEGACY_DOCUMENT_CATEGORY DOCUMENT_TYPE
, LEGACY_ORG
, UID
, FILE_SIZE_BYTES
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND NEW_DOCUMENT_CATEGORY = 'Tenders'
AND FILEPROCONID IN (
	SELECT COALESCE(LEGACY_DOC_ID,'') 
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'PROCON' 
	AND LEGACY_ORG = 'HBHP'
	AND NEW_DOCUMENT_CATEGORY = 'Tenders'
	AND DATE(CREATED) = '2025-03-07'
);


























------------------------------------------------------------- HBHP END ---------------------------------------------------------





X. Select Document in-scope for migration:

/* SET the Selected for migration */
MERGE INTO CLMS_DOCUMENTS cd
USING (
	/* contract in-scope */
	SELECT DISTINCT RIGHT(EXTRACT_TYPE,4) AS LEGACY_ORG, 
	CONTRACTPROCONREFERENCE, 
	CONTRACTTYPE
	FROM PROCON_HBHP_VALID_CONTRACTS_VW
) z	
ON cd.LEGACY_CONTRACT_REFERENCE = z.CONTRACTPROCONREFERENCE 
	AND cd.LEGACY_ORG = z.LEGACY_ORG
	AND cd.LEGACY_SYSTEM = 'PROCON'
	AND cd.NEW_DOCUMENT_CATEGORY != 'Tenders'
	AND cd.ZIP_FILENAME IS NULL
	AND cd.LATEST_VERSION
WHEN MATCHED THEN UPDATE SET 
	SELECTED_FOR_MIGRATION = TRUE    




--- Create a list in CSV file that will be used for downloading the documents using via API linux

SELECT 
ROW_NUMBER() OVER(ORDER BY UID) SEQ
, LEGACY_CONTRACT_REFERENCE CONTRACTPROCONREFERENCE
, LEGACY_DOC_ID FILEPROCONID
, MODIFIED_FILENAME API_FILENAME
, LEGACY_DOCUMENT_CATEGORY DOCUMENT_TYPE
, LEGACY_ORG
, UID 
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND NEW_DOCUMENT_CATEGORY != 'Tenders'
--AND DATE(CREATED) = '2025-01-07'



-- Check readiness before create blob
SELECT *
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP'
AND LEGACY_SYSTEM = 'PROCON' 	
AND SELECTED_FOR_MIGRATION 
--AND USE_DUMMY_FILE 
--AND REPLACEMENT_FILE IS NOT NULL
AND ( COALESCE(BLOB_FILENAME,'') = '' 
      OR COALESCE(BLOB_PATH,'') = '' 
      OR COALESCE(S3_PATH,'') = '' 
)
ORDER BY CREATED DESC



/* Blob file S3 movement	*/ -----------------------------------------------------------------------



WITH blob AS (
	/* move as it is */
	SELECT S3_PATH AS SOURCE_PATH , 'load-to-blob/procon-hbhp/' || BLOB_PATH || BLOB_FILENAME AS Target_Path, 1 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND NOT USE_DUMMY_FILE
	UNION
	/* move original file to replacement folder */
	SELECT S3_PATH AS SOURCE_PATH , 'load-to-blob/procon-hbhp/' || REPLACEMENT_FILE AS Target_Path, 2 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND USE_DUMMY_FILE
	UNION
	/* dummy file for file gt 200 MB to document blob folder */
	SELECT CASE UPPER(RIGHT(S3_PATH,3)) 
		WHEN 'PDF' THEN 'scripts/dummy_file.pdf' 
		WHEN 'ZIP' THEN 'scripts/dummy_file.zip' 	
	END AS SOURCE_PATH 
	, 'load-to-blob/procon-hbhp/' || BLOB_PATH || BLOB_FILENAME AS Target_Path , 3 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND USE_DUMMY_FILE
	AND (FILE_SIZE_BYTES / (1024 * 1000)) >= 200
)
SELECT REPLACE(REPLACE(SOURCE_PATH, 'procon-hbhp-extract/','procon-hbhp/'),'scripts/','') AS "SourceFilePath" , 
REPLACE(TARGET_PATH, 'load-to-blob/','blob/') AS "TargetFilePath", 
ID, UID 
FROM blob




-- Check Files greater than 200MB with its Replacement Files

SELECT BLOB_FILENAME, BLOB_PATH, REPLACEMENT_FILE  
FROM CLMS_DOCUMENTS 
WHERE LEGACY_SYSTEM = 'PROCON' 
AND LEGACY_ORG = 'HBHP' 
AND SELECTED_FOR_MIGRATION 
AND ZIP_FILENAME IS NULL
AND FILE_SIZE_BYTES / (1024000) >= 200





-- ARCHIVING

-- Insert TENDERS documents into CLMS_DOCUMENTS
INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_DOC_ID, LEGACY_FILENAME, LEGACY_SYSTEM, LEGACY_ORG,	
	SOURCE_TYPE, LEGACY_DOCUMENT_CATEGORY, NEW_DOCUMENT_CATEGORY, MODIFIED_FILENAME,
	SELECTED_FOR_MIGRATION, BLOB_FILENAME, SOURCE_PATH, S3_PATH, BLOB_PATH, FILE_SIZE_BYTES, 
	FILE_VERSION, LATEST_VERSION, LAST_MODIFIED
)
SELECT TENDERPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 'PROCON' AS LEGACY_SYSTEM, LEGACY_ORG, 
'API' AS SOURCE_TYPE, DOCUMENT_TYPE, NEWDOCTYPE, FILENAME, 
FALSE AS selected_for_migration,  NULL blobfilename, NULL sourcepath,  NULL s3path, NULL blobpath, FILESIZE,
FILEVERSIONNUMBER, LATEST_VERSION, LASTMODIFIED,
FROM (
	SELECT DISTINCT TENDERPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 
	CASE WHEN EXTRACT_TYPE LIKE '%BHP%' THEN 'HBHP' 
		ELSE 'HWEL' 
	END AS LEGACY_ORG, 
	DOCUMENT_TYPE,
	'Tenders' AS NEWDOCTYPE, 
	COALESCE(MODIFIED_FILENAME, API_FILENAME) AS FILENAME,
	FILESIZE,
	COALESCE(FILEVERSIONNUMBER,'0') AS FILEVERSIONNUMBER ,
	LATEST_VERSION,
	LASTMODIFIED
	FROM PROCON_TENDER_DOCUMENTS_VW
	WHERE extract_type = 'PH3_HWEL' 
) 
-- excluce files that already in the table to avoid duplication
WHERE FILEPROCONID NOT IN (
	SELECT COALESCE(LEGACY_DOC_ID,'') 
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'PROCON' 
	AND LEGACY_ORG = 'HWEL'
);



-- Update S3_PATH
UPDATE CLMS_DOCUMENTS  
SET S3_PATH = CONCAT('archive/', LOWER(LEGACY_ORG),'-tenders','/',LEGACY_CONTRACT_REFERENCE,'/',LEGACY_DOCUMENT_CATEGORY,'/',MODIFIED_FILENAME)
WHERE LEGACY_SYSTEM = 'PROCON'
AND LEGACY_ORG = 'HBHP'
AND NEW_DOCUMENT_CATEGORY = 'Tenders';


-- USE FOR LINUX API EXTRACT 
SELECT 
ROW_NUMBER() OVER(ORDER BY UID) SEQ
, LEGACY_CONTRACT_REFERENCE CONTRACTPROCONREFERENCE
, LEGACY_DOC_ID FILEPROCONID
, MODIFIED_FILENAME API_FILENAME
, LEGACY_DOCUMENT_CATEGORY DOCUMENT_TYPE
, LEGACY_ORG
, UID
, FILE_SIZE_BYTES
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND NEW_DOCUMENT_CATEGORY = 'Tenders'











-- FIXING duplication MERGE INTO CLMS_DOCUMENTS D 
USING (
	WITH duplication AS (
		SELECT LEGACY_SYSTEM, LEGACY_ORG, LEGACY_CONTRACT_REFERENCE,  LEGACY_DOC_ID
		FROM CLMS_DOCUMENTS 
		WHERE COALESCE(LEGACY_DOC_ID,'') != ''
		AND LATEST_VERSION
		GROUP BY LEGACY_SYSTEM, LEGACY_ORG, LEGACY_CONTRACT_REFERENCE,  LEGACY_DOC_ID
		HAVING COUNT(*) > 1
	),
	tobeupdate AS (
	SELECT cd.LEGACY_DOC_ID, MAX(CD.UID) AS UID 
	FROM CLMS_DOCUMENTS cd 
	JOIN duplication D 
		ON cd.LEGACY_SYSTEM = d.LEGACY_SYSTEM 
		AND cd.LEGACY_ORG = d.LEGACY_ORG 
		AND cd.LEGACY_CONTRACT_REFERENCE  = d.LEGACY_CONTRACT_REFERENCE 
		AND cd.LEGACY_DOC_ID = d.LEGACY_DOC_ID
	--WHERE cd.SELECTED_FOR_MIGRATION 
	GROUP BY cd.LEGACY_DOC_ID
	)
	SELECT * FROM tobeupdate
) T
ON D.LEGACY_DOC_ID = T.LEGACY_DOC_ID
AND D.UID <> T.UID 
WHEN MATCHED THEN UPDATE SET D.SELECTED_FOR_MIGRATION = FALSE 
, D.LATEST_VERSION = FALSE




/* INSERT and UPDATE after Manual EXTRACT */
INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_DOC_ID, LEGACY_FILENAME, LEGACY_SYSTEM, LEGACY_ORG,	
	SOURCE_TYPE, LEGACY_DOCUMENT_CATEGORY, NEW_DOCUMENT_CATEGORY, MODIFIED_FILENAME,
	SELECTED_FOR_MIGRATION, BLOB_FILENAME, SOURCE_PATH, S3_PATH, BLOB_PATH, FILE_SIZE_BYTES, 
	FILE_VERSION, LATEST_VERSION, LAST_MODIFIED
)
SELECT 
CONTRACTPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 'PROCON' AS LEGACY_SYSTEM, LEGACY_ORG, 
'API' AS SOURCE_TYPE, DOCUMENT_TYPE, NEWDOCTYPE, FILENAME, 
TRUE AS selected_for_migration,  
NULL blobfilename, 
NULL sourcepath,  
NULL s3path, 
NULL blobpath, 
FILESIZE,
FILEVERSIONNUMBER, LATEST_VERSION, LASTMODIFIED,
FROM (
	SELECT DISTINCT CONTRACTPROCONREFERENCE, FILEPROCONID, ORIGINAL_FILENAME, 
	CASE WHEN EXTRACT_TYPE LIKE '%BHP%' THEN 'HBHP' 
		ELSE 'HWEL' 
	END AS LEGACY_ORG, 
	DOCUMENT_TYPE,
	CASE 
		WHEN DOCUMENT_TYPE = '01 Library Items' AND UPPER(FILEEXTENSION) = 'PDF' THEN 'Executed Version (pdf)'
		WHEN DOCUMENT_TYPE = '01 Library Items' AND UPPER(FILEEXTENSION) != 'PDF' THEN 'Supporting Documents'
		WHEN DOCUMENT_TYPE = '02 Risk Covers' THEN 'Contract Risk Cover'
		WHEN DOCUMENT_TYPE IN ('03 Internal Communications', '04 External Communications', '05 Communication State Transitions') THEN 'Legacy Communication'
		ELSE NULL 
	END AS NEWDOCTYPE, 
	COALESCE(MODIFIED_FILENAME, API_FILENAME) AS FILENAME,
	FILESIZE,
	COALESCE(FILEVERSIONNUMBER,'0') AS FILEVERSIONNUMBER ,
	LATEST_VERSION,
	LASTMODIFIED
	FROM PROCON_DOCUMENTS_VW
	WHERE CONTRACTPROCONREFERENCE = 'CONTRACT NO. 4900000023 - TRION - INTERCONNECTION AGREEMENT' 
	AND extract_type = 'PH4_HBHP' 
) 
-- excluce files that already in the table to avoid duplication
WHERE FILEPROCONID NOT IN (
	SELECT COALESCE(LEGACY_DOC_ID,'') 
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'PROCON' 
	AND LEGACY_ORG = 'HBHP'
	AND NEW_DOCUMENT_CATEGORY != 'Tenders'
);



UPDATE CLMS_DOCUMENTS 
SET NEW_CONTRACT_TYPE = 'Standalone'
WHERE UID = 1455100;

UPDATE CLMS_DOCUMENTS 
SET BLOB_FILENAME = CONCAT('Uid',UID,'_', MODIFIED_FILENAME)
, BLOB_PATH = CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		END || '/'|| NEW_DOCUMENT_CATEGORY  ||'/' 
, S3_PATH = CONCAT('procon-hbhp-extract/', LEGACY_CONTRACT_REFERENCE, '/', LEGACY_DOCUMENT_CATEGORY ,'/', MODIFIED_FILENAME) 
WHERE UID = 1455100;

SELECT * FROM CLMS_DOCUMENTS WHERE UID = 1455100



SELECT 
ROW_NUMBER() OVER(ORDER BY UID) SEQ
, LEGACY_CONTRACT_REFERENCE CONTRACTPROCONREFERENCE
, LEGACY_DOC_ID FILEPROCONID
, MODIFIED_FILENAME API_FILENAME
, LEGACY_DOCUMENT_CATEGORY DOCUMENT_TYPE
, LEGACY_ORG
, UID
, FILE_SIZE_BYTES
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HBHP' 
AND LEGACY_SYSTEM = 'PROCON'
AND NEW_DOCUMENT_CATEGORY != 'Tenders'
AND UID = 1455100






--- CHECK MISSING BLOB ----------------------------------

SELECT BLOB_PATH, COUNT(*) 
FROM CLMS_DOCUMENTS 
WHERE LEGACY_SYSTEM = 'PROCON' 
AND LEGACY_ORG = 'HBHP' 
AND SELECTED_FOR_MIGRATION 
GROUP BY BLOB_PATH
ORDER BY BLOB_PATH

SELECT * --5781 - 2165 = 3616
FROM CLMS_DOCUMENTS 
WHERE LEGACY_SYSTEM = 'PROCON' 
AND LEGACY_ORG = 'HBHP' 
AND SELECTED_FOR_MIGRATION 
AND ZIP_FILENAME IS NULL
AND (BLOB_FILENAME IS NULL
OR BLOB_PATH IS NULL 
OR S3_PATH IS NULL)
--AND FILE_SIZE_BYTES /(1024000) >= 200
--AND USE_DUMMY_FILE

WITH 
fix AS (
	SELECT UID, S3_PATH
	, CONCAT('Uid',UID,'_', MODIFIED_FILENAME) AS BLOB_FILENAME
	, CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		END || '/'|| NEW_DOCUMENT_CATEGORY  ||'/' AS BLOB_PATH
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND NOT USE_DUMMY_FILE
	AND ZIP_FILENAME IS NULL
	AND (BLOB_FILENAME IS NULL
	OR BLOB_PATH IS NULL 
	OR S3_PATH IS NULL)
)

,blob AS (
	/* move as it is */
	SELECT S3_PATH AS SOURCE_PATH , 'load-to-blob/procon-hbhp/' || BLOB_PATH || BLOB_FILENAME AS Target_Path, 1 ID, UID 
	FROM fix
)
SELECT REPLACE(REPLACE(SOURCE_PATH, 'procon-hbhp-extract/','procon-hbhp/'),'scripts/','') AS "SourceFilePath" , 
REPLACE(TARGET_PATH, 'load-to-blob/','blob/') AS "TargetFilePath", 
ID, UID 
FROM blob

	UPDATE CLMS_DOCUMENTS
	SET BLOB_FILENAME = CONCAT('Uid',UID,'_', MODIFIED_FILENAME)
	, BLOB_PATH = CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		END || '/'|| NEW_DOCUMENT_CATEGORY  ||'/'
	WHERE LEGACY_ORG = 'HBHP'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND SELECTED_FOR_MIGRATION 
	AND NOT USE_DUMMY_FILE
	AND ZIP_FILENAME IS NULL
	AND (BLOB_FILENAME IS NULL
	OR BLOB_PATH IS NULL 
	OR S3_PATH IS NULL)




SELECT REPLACE(REPLACE(S3_PATH, 'procon-hbhp-extract/','procon-hbhp/'),'scripts/','') AS "SourceFilePath" , 
'blob/procon-hbhp/' || BLOB_PATH || BLOB_FILENAME AS "TargetFilePath", 
1 AS ID, UID  
FROM CLMS_DOCUMENTS 
WHERE LEGACY_SYSTEM = 'PROCON' 
AND LEGACY_ORG = 'HBHP' 
AND SELECTED_FOR_MIGRATION 
AND UID IN (
1363237,1362935,1363119,1362934,1363120,1363184,1362737,1363275,1363451,1363417,1363001,1363049,1365706,1144583,1133845,
1133844,1133843,1108214,1108213,1108212,1099247,1099246,1099245,1078233,1078232,1078157,1070339,1070338,1016878,1016877,
1002506,1002510,1002509,1002508,1002507,1003546,1003545,1003544,1003543,1003542,1003541,1003540,1003537,1003536,1003535,
1003534,1003533,1003532,1003531,1003530,1003527,1003521,1003520,1003519,1003518,1003517,1003516,1003515,1003514,1003511,
1003510,1003509,1003506,1003505,1003504,1003503,1003502,1003501,1003500,1003499,1003498,1003487,1003486,1003485,1003478,1003477
)


----------------------- GCMS ---------------------------------
	WITH 
	contract_docs AS (
	SELECT DISTINCT c.UID,c.LEGACY_CONTRACT_REFERENCE, c.LEGACY_DOCUMENT_CATEGORY, c.LEGACY_FILENAME, c.LAST_MODIFIED
	, CASE c.LEGACY_DOCUMENT_CATEGORY
		WHEN 'contractmcdproposal' THEN '01'
		WHEN 'contractfsbuyer' THEN '02'
		WHEN 'contractamendment' THEN '03'
		WHEN 'contractfssupplier' THEN '04'
	END AS SEARCH_SEQ, c.S3_PATH
	, CASE v.NEW_CONTRACT_TYPE_ICERTIS
		WHEN 'Frame Agreement' THEN 'Framework'
		WHEN 'Legacy MSA' THEN 'Master Service Agreement'
		WHEN 'Call-Off' THEN 'CallOff'
		WHEN 'Standalone Agreement' THEN 'Standalone'	
		ELSE v.NEW_CONTRACT_TYPE_ICERTIS 
	END AS NEW_CONTRACT_TYPE, v.SUPPLIER_REPRESENTATIVE AS CONTRACT_ADVISER
	FROM CLMS_DOCUMENTS c
	JOIN GCMS_VALID_CONTRACTS_VW v 
		ON c.LEGACY_CONTRACT_REFERENCE = v.CONTRACT_REFERENCE_CODE 
		AND c.LEGACY_SYSTEM = 'GCMS'
	WHERE COALESCE(c.SELECTED_FOR_MIGRATION, FALSE) = FALSE
	),
	pdf_doc AS (
		SELECT * FROM contract_docs
		WHERE UPPER(RIGHT(LEGACY_FILENAME,3)) = 'PDF' 
	),
	pdf_and_incl_keys AS (
		SELECT *, 
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%EXECUTE%', '%EXCECUTED%', '%CONTRACT %', '%AGREEMENT%', '%SIGNED%', '%PET-C%', '%PET-A%', '%MSA%', '%MSC%', '%MTC%', '%_EXE_%', '%Master%Service%', '%Encontrado%')
			THEN TRUE ELSE FALSE END AS Executed,
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%AMEND%') 
			THEN TRUE ELSE FALSE END AS Amendment,
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%VARIATI%') 
			THEN TRUE ELSE FALSE END AS Variation,	
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%CAF%', '%ACE%', '%AFC%', '%Authority for Contract Execution%' ) 
				AND NOT LEGACY_FILENAME ILIKE ANY ('%MACE%', '%SURFACE%')
			THEN TRUE ELSE FALSE END AS CAF	
		FROM pdf_doc
	), 
	pdf_and_incl_excl_keys AS ( 
		SELECT *,  
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%REPORT%', '%LETTER%', '%ORDER FORM%', '%SOW Template%')
			THEN TRUE ELSE FALSE END AS Excluded
		FROM pdf_and_incl_keys
	),
	pdf_docs_after_keywords_check AS (
		SELECT UID, LEGACY_CONTRACT_REFERENCE, NEW_CONTRACT_TYPE, LEGACY_DOCUMENT_CATEGORY, SEARCH_SEQ, 
		LEGACY_FILENAME, Executed, Amendment, Variation, Excluded, CAF, LAST_MODIFIED, 
		ROW_NUMBER() OVER(PARTITION BY LEGACY_CONTRACT_REFERENCE ORDER BY EXCLUDED, SEARCH_SEQ, Executed DESC, LAST_MODIFIED DESC) AS PRIORITY,
		S3_PATH, CONTRACT_ADVISER
		FROM pdf_and_incl_excl_keys
	),
	executed_found_in_p1 AS (
		SELECT *
		FROM pdf_docs_after_keywords_check
		WHERE NOT EXCLUDED AND NOT CAF
		AND PRIORITY = 1
		AND (EXECUTED OR AMENDMENT)
	),
	executed_not_found_in_p1 AS (
		SELECT *
		FROM pdf_docs_after_keywords_check
		WHERE NOT EXCLUDED AND NOT CAF
		AND PRIORITY = 1
		AND NOT EXECUTED AND NOT AMENDMENT
	),
	CAF AS (
		SELECT *
		FROM pdf_docs_after_keywords_check
		WHERE NOT EXCLUDED AND CAF
		--AND PRIORITY = 1
		--AND (EXECUTED OR AMENDMENT)
	),
	check_result AS (
	SELECT 
	CASE WHEN AMENDMENT THEN 'Amendments and Variations'
		WHEN VARIATION THEN 'Amendments and Variations'
		WHEN CAF THEN 'Contract Approval Form(CAF)'
		ELSE 'Executed Version (pdf)'
		END AS NEW_DOCUMENT_CATEGORY, * 
	FROM executed_found_in_p1
	) 
	SELECT * FROM check_result
	
	
	
	
	
	
MERGE INTO CLMS_DOCUMENTS y
USING (
SELECT  cd.UID, 
CASE  vc.NEW_CONTRACT_TYPE_ICERTIS
		WHEN 'Frame Agreement' THEN 'Framework'
		WHEN 'Legacy MSA' THEN 'Master Service Agreement'
		WHEN 'Call-Off' THEN 'CallOff'
		WHEN 'Standalone Agreement' THEN 'Standalone'	
		ELSE vc.NEW_CONTRACT_TYPE_ICERTIS  END AS NEW_CONTRACT_TYPE
FROM GCMS_VALID_CONTRACTS_VW vc
JOIN CLMS_DOCUMENTS cd 
	ON vc.CONTRACT_REFERENCE_CODE = cd.LEGACY_CONTRACT_REFERENCE 
	--AND cd.LEGACY_ORG = 'HBHP'
	AND cd.LEGACY_SYSTEM = 'GCMS'
	AND cd.SELECTED_FOR_MIGRATION 
WHERE cd.NEW_CONTRACT_TYPE  IS NULL
) x
ON x.UID = y.UID
WHEN MATCHED THEN UPDATE SET y.NEW_CONTRACT_TYPE =  x.NEW_CONTRACT_TYPE


MERGE INTO CLMS_DOCUMENTS y
USING (	
WITH clms_docs_all AS (
	SELECT *, LEGACY_FILENAME AS FILEFULLNAME --, CONCAT('Uid',UID,'_', MODIFIED_FILENAME) 
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'GCMS'
	AND LEGACY_FILENAME IS NOT NULL
),

special_char_check AS (
	SELECT *, 
	CASE WHEN FILEFULLNAME != regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '?') 
		THEN regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '_') 
		ELSE NULL 
	END SPECIAL_CHAR,
	CASE WHEN FILEFULLNAME != regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '?') 
			AND FILEFULLNAME = regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '') 
		THEN regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '') 
		ELSE NULL 
	END INVISIBLE_CHAR
	FROM clms_docs_all
), 
	modified_file_name AS ( 
		SELECT 	*, 
	   	CASE WHEN SPECIAL_CHAR IS NOT NULL 
	   		THEN TRUE ELSE FALSE 
	   	END AS CONTAINS_SPECIAL_CHAR,
	   	CASE 
		   	WHEN SPECIAL_CHAR IS NOT NULL AND INVISIBLE_CHAR IS NOT NULL 
		   		THEN INVISIBLE_CHAR 
	   		WHEN SPECIAL_CHAR IS NOT NULL AND INVISIBLE_CHAR IS NULL 
	   			THEN SPECIAL_CHAR
	   		ELSE NULL 
	   	END AS FILENAME
		FROM special_char_check
	)
SELECT * 
, COALESCE(FILENAME, LEGACY_FILENAME)  AS MODFILENAME
, CONCAT('Uid',UID,'_', COALESCE(FILENAME, LEGACY_FILENAME)) AS BLOBFN
, CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		WHEN 'Master Service Agreement' THEN  'Master Service Agreement(MSA)'
		END || '/'|| NEW_DOCUMENT_CATEGORY  ||'/' AS BLOBPH
--, S3_PATH = CONCAT('procon-hbhp-extract/', LEGACY_CONTRACT_REFERENCE, '/', LEGACY_DOCUMENT_CATEGORY ,'/', MODIFIED_FILENAME) 
FROM modified_file_name
--WHERE MODIFIED_FILENAME IS NULL
WHERE (BLOB_FILENAME IS NULL OR BLOB_PATH IS NULL)
AND LEGACY_CONTRACT_REFERENCE IN (SELECT CONTRACT_REFERENCE_CODE FROM GCMS_VALID_CONTRACTS_VW  )
) x
ON x.UID = y.UID
WHEN MATCHED THEN UPDATE SET 
--y.MODIFIED_FILENAME =  x.MODFILENAME
y.BLOB_FILENAME = x.BLOBFN
, y.BLOB_PATH = x.BLOBPH

-------------------------------------------  HWEL ------------------------------------------------------

MERGE INTO CLMS_DOCUMENTS y
USING (	
WITH clms_docs_all AS (
	SELECT *, LEGACY_FILENAME AS FILEFULLNAME 
	FROM CLMS_DOCUMENTS 
	WHERE COALESCE(SOURCE_PATH,'') != ''
	AND LEGACY_SYSTEM = 'PROCON'
	AND LEGACY_ORG = 'HWEL'
	AND LEGACY_FILENAME IS NOT NULL
),

special_char_check AS (
	SELECT *, 
	CASE WHEN FILEFULLNAME != regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '?') 
		THEN regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '_') 
		ELSE NULL 
	END SPECIAL_CHAR,
	CASE WHEN FILEFULLNAME != regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '?') 
			AND FILEFULLNAME = regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '') 
		THEN regexp_replace(FILEFULLNAME, '[^[:ascii:]]', '') 
		ELSE NULL 
	END INVISIBLE_CHAR
	FROM clms_docs_all
), 
	modified_file_name AS ( 
		SELECT 	*, 
	   	CASE WHEN SPECIAL_CHAR IS NOT NULL 
	   		THEN TRUE ELSE FALSE 
	   	END AS CONTAINS_SPECIAL_CHAR,
	   	CASE 
		   	WHEN SPECIAL_CHAR IS NOT NULL AND INVISIBLE_CHAR IS NOT NULL 
		   		THEN INVISIBLE_CHAR 
	   		WHEN SPECIAL_CHAR IS NOT NULL AND INVISIBLE_CHAR IS NULL 
	   			THEN SPECIAL_CHAR
	   		ELSE NULL 
	   	END AS FILENAME
		FROM special_char_check
	)
SELECT * 
, COALESCE(FILENAME, LEGACY_FILENAME)  AS MODFILENAME
, CONCAT('Uid',UID,'_', COALESCE(FILENAME, LEGACY_FILENAME)) AS BLOBFN
, CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		WHEN 'Master Service Agreement' THEN  'Master Service Agreement(MSA)'
		END || '/'|| NEW_DOCUMENT_CATEGORY  ||'/' AS BLOBPH
--, S3_PATH = CONCAT('procon-hbhp-extract/', LEGACY_CONTRACT_REFERENCE, '/', LEGACY_DOCUMENT_CATEGORY ,'/', MODIFIED_FILENAME) 
FROM modified_file_name
--WHERE MODIFIED_FILENAME IS NULL
WHERE (BLOB_FILENAME IS NULL OR BLOB_PATH IS NULL)
AND LEGACY_CONTRACT_REFERENCE IN (SELECT CONTRACTPROCONREFERENCE FROM PROCON_HWEL_VALID_CONTRACTS_VW  )
) x
ON x.UID = y.UID
WHEN MATCHED THEN UPDATE SET 
--y.MODIFIED_FILENAME =  x.MODFILENAME
y.BLOB_FILENAME = x.BLOBFN, y.BLOB_PATH = x.BLOBPH






--- CLEAN UP ZIP FILES (HBHP)
SELECT * --DISTINCT MODIFIED_FILENAME 
FROM CLMS_DOCUMENTS
WHERE MODIFIED_FILENAME IN (
	SELECT DISTINCT ZIP_FILENAME  
	FROM CLMS_DOCUMENTS 
	WHERE ZIP_FILENAME IS NOT NULL 
	AND LEGACY_SYSTEM = 'PROCON'
	AND LEGACY_ORG = 'HBHP'
	AND SELECTED_FOR_MIGRATION 
)
AND LEGACY_SYSTEM = 'PROCON'
AND LEGACY_ORG = 'HBHP'
AND SOURCE_TYPE != 'ZIP' 



MERGE INTO CLMS_DOCUMENTS y 
USING (
	WITH zip_docs AS (
		-- 447 zip files -- 1539 docs
		SELECT UID, MODIFIED_FILENAME, BLOB_FILENAME, BLOB_PATH, ZIP_FILENAME  
		FROM CLMS_DOCUMENTS 
		WHERE ZIP_FILENAME IS NOT NULL 
		AND LEGACY_SYSTEM = 'PROCON'
		AND LEGACY_ORG = 'HBHP'
		AND SELECTED_FOR_MIGRATION 
	),
	zip_files AS (
		SELECT UID, MODIFIED_FILENAME, BLOB_FILENAME, SELECTED_FOR_MIGRATION  
		FROM CLMS_DOCUMENTS 
		WHERE LEGACY_SYSTEM = 'PROCON'
		AND LEGACY_ORG = 'HBHP'
		AND SOURCE_TYPE = 'ZIP'
	)
	SELECT zd.* 
	FROM zip_docs zd 
	LEFT JOIN zip_files zf 
	ON zd.ZIP_FILENAME = zf.MODIFIED_FILENAME
	WHERE zf.MODIFIED_FILENAME IS NULL
	
	/*
	SELECT zd.*
	FROM zip_docs zd 
	JOIN zip_files zf 
	ON zd.ZIP_FILENAME = zf.MODIFIED_FILENAME
	*/
) x 
ON y.UID = x.UID
WHEN MATCHED THEN UPDATE SET 
y.SELECTED_FOR_MIGRATION = FALSE, y.BLOB_FILENAME = NULL, y.BLOB_PATH = NULL



-- Fix Timestamp format
UPDATE CLMS_DOCUMENTS
SET LAST_MODIFIED = REPLACE(LAST_MODIFIED,'/','-')::TIMESTAMPLTZ::TEXT
WHERE LAST_MODIFIED IS NOT NULL


-- BLOB for HWEL UAT results (17496) all these records have been moved to EC2 BLOB
SELECT SOURCE_PATH AS "SourceFilePath" , 
'blob/procon-hwel/' || BLOB_PATH || BLOB_FILENAME AS "TargetFilePath", 
UID, ROW_NUMBER() OVER(ORDER BY UID) AS SEQ
FROM CLMS_DOCUMENTS 
WHERE LEGACY_SYSTEM = 'PROCON'
AND LEGACY_ORG = 'HWEL'
AND COALESCE(NEW_DOCUMENT_CATEGORY,'') != 'Tenders'
AND SOURCE_TYPE = 'Sharepoint:UAT'
AND LEGACY_CONTRACT_REFERENCE IS NOT NULL
AND SELECTED_FOR_MIGRATION
ORDER BY UID


/*
 * HWEL Comms: fix incorrect modified filename in the CLMS_DOCUMENTS
 * 
 */
MERGE INTO CLMS_DOCUMENTS y
USING (	
	WITH procon_docs AS (
		SELECT * 
		FROM PROCON_DOCUMENTS_VW 
		WHERE EXTRACT_TYPE = 'PH3_HWEL'
	)
	SELECT cd.UID, cd.MODIFIED_FILENAME, pd.API_FILENAME 
	FROM CLMS_DOCUMENTS cd 
	JOIN procon_docs pd 
	ON pd.CONTRACTPROCONREFERENCE = cd.LEGACY_CONTRACT_REFERENCE
	AND pd.FILEPROCONID = cd.LEGACY_DOC_ID
	AND pd.LATEST_VERSION
	AND pd.API_FILENAME <> cd.MODIFIED_FILENAME
	WHERE LEGACY_ORG = 'HWEL' 
	AND LEGACY_SYSTEM = 'PROCON'
	AND COALESCE(NEW_DOCUMENT_CATEGORY,'') = 'Legacy Communication'
) x
ON x.UID = y.UID
WHEN MATCHED THEN UPDATE SET 
y.MODIFIED_FILENAME =  x.API_FILENAME


-- Generate a list for HWEL COMMS ZIP FILES
SELECT vw.LEGACY_CONTRACT_NO, vw.FILEPROCONID, vw.LEGACY_COMM_TYPE, 
	CONCAT(vw.LEGACY_CONTRACT_NO,'/',cd.LEGACY_DOCUMENT_CATEGORY,'/',cd.MODIFIED_FILENAME) AS SOURCE_FILE, 
	REPLACE(ZIP_FILE,'/','_') AS ZIP_FILE
	--, cd.MODIFIED_FILENAME, vw.SOURCE_FILE 
FROM PROCON_DOCUMENTS_COMM_ZIP_VW vw
JOIN CLMS_DOCUMENTS cd
	ON vw.LEGACY_CONTRACT_NO = cd.LEGACY_CONTRACT_REFERENCE 
	AND vw.FILEPROCONID =cd.LEGACY_DOC_ID 
WHERE vw.EXTRACT_TYPE = ( SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HWEL_VW )
AND cd.LEGACY_ORG = 'HWEL'


-- FIX S3_PATH for comms
MERGE INTO CLMS_DOCUMENTS y
USING (	
	-- HWEL COMMS ZIP FILES
	SELECT vw.LEGACY_CONTRACT_NO, vw.FILEPROCONID, vw.LEGACY_COMM_TYPE, 
		CONCAT(vw.LEGACY_CONTRACT_NO,'/',cd.LEGACY_DOCUMENT_CATEGORY,'/',cd.MODIFIED_FILENAME) AS SOURCE_FILE, 
		REPLACE(ZIP_FILE,'/','_') AS ZIP_FILE
		, cd.UID, cd.S3_PATH
		--, cd.MODIFIED_FILENAME, vw.SOURCE_FILE 
	FROM PROCON_DOCUMENTS_COMM_ZIP_VW vw
	JOIN CLMS_DOCUMENTS cd
		ON vw.LEGACY_CONTRACT_NO = cd.LEGACY_CONTRACT_REFERENCE 
		AND vw.FILEPROCONID =cd.LEGACY_DOC_ID 
	WHERE vw.EXTRACT_TYPE = ( SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HWEL_VW )
	AND cd.LEGACY_ORG = 'HWEL'
	AND cd.S3_PATH IS NULL
	--AND cd.UID = 1029455
) x
ON x.UID = y.UID
WHEN MATCHED THEN UPDATE SET 
y.S3_PATH =  'procon-hwel/'||x.SOURCE_FILE


/* Insert list of genarated ZIP files into clms documents (HWEL) */ 
INSERT INTO CLMS_DOCUMENTS (
	LEGACY_CONTRACT_REFERENCE, LEGACY_FILENAME,LEGACY_SYSTEM,LEGACY_ORG,
	SOURCE_TYPE,LEGACY_DOCUMENT_CATEGORY,NEW_DOCUMENT_CATEGORY, NEW_CONTRACT_TYPE, SELECTED_FOR_MIGRATION,
	MODIFIED_FILENAME,S3_PATH, LATEST_VERSION
)
SELECT DISTINCT 
      LEGACY_CONTRACT_REFERENCE
	, ZIP_FILENAME LEGACY_FILENAME
	, LEGACY_SYSTEM
	, LEGACY_ORG
	, 'ZIP' SOURCE_TYPE
	, LEGACY_DOCUMENT_CATEGORY
	, NEW_DOCUMENT_CATEGORY
	, NEW_CONTRACT_TYPE
	, FALSE SELECTED_FOR_MIGRATION
	, ZIP_FILENAME MODIFIED_FILENAME
	, CONCAT('procon-hwel-extract/zip/',ZIP_FILENAME) AS S3_PATH
	, TRUE LATEST_VERSION
FROM CLMS_DOCUMENTS 
WHERE LEGACY_ORG = 'HWEL' 
AND LEGACY_SYSTEM = 'PROCON'
--AND NEW_DOCUMENT_CATEGORY ='Legacy Communication'
AND ZIP_FILENAME IS NOT NULL
AND ZIP_FILENAME NOT IN (
	SELECT DISTINCT MODIFIED_FILENAME
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HWEL' 
	AND SOURCE_TYPE = 'ZIP'   
)
ORDER BY LEGACY_CONTRACT_REFERENCE


-- Update HWEL selected from migration
MERGE INTO CLMS_DOCUMENTS y
USING (	
	SELECT CD.UID 
	FROM PROCON_HWEL_VALID_CONTRACTS_VW VC
	JOIN LATEST_EXTRACT_PROCON_HWEL_VW LT
		ON LT.EXTRACT_TYPE = VC.EXTRACT_TYPE 
	JOIN CLMS_DOCUMENTS CD 
		ON CD.LEGACY_CONTRACT_REFERENCE = VC.CONTRACTPROCONREFERENCE 
		AND CD.LEGACY_ORG = 'HWEL'
		AND CD.NEW_DOCUMENT_CATEGORY  != 'Tenders'
		AND CD.SOURCE_TYPE NOT IN ( 'Sharepoint:UAT')
	WHERE NOT CD.SELECTED_FOR_MIGRATION
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 
y.SELECTED_FOR_MIGRATION = TRUE
	


-- Update Legacy Doc Id for the ZIP files 
UPDATE CLMS_DOCUMENTS
SET LEGACY_DOC_ID  = UID::TEXT
WHERE LEGACY_ORG = 'HWEL'
AND NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND SOURCE_TYPE = 'ZIP'
--AND SOURCE_TYPE IN ( 'Sharepoint:UAT')
AND LEGACY_DOC_ID IS NULL

AND LEGACY_CONTRACT_REFERENCE IS NULL


-- Update Blob files and path for HWEL selected from migration
UPDATE CLMS_DOCUMENTS
SET BLOB_FILENAME = CONCAT('Uid',UID,'_', MODIFIED_FILENAME)
, BLOB_PATH = 
CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		WHEN 'Master Service Agreement' THEN  'Master Service Agreement(MSA)'
		END || CONCAT('/', NEW_DOCUMENT_CATEGORY,'/')
--SELECT * FROM CLMS_DOCUMENTS
WHERE LEGACY_ORG = 'HWEL'
AND NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND SOURCE_TYPE NOT IN ( 'Sharepoint:UAT')
AND SELECTED_FOR_MIGRATION
AND BLOB_FILENAME IS NULL	
	

-- Update Replacement File for HWEL file > 200MB selected from migration
UPDATE CLMS_DOCUMENTS cd
SET REPLACEMENT_FILE = CONCAT(NEW_CONTRACT_TYPE ,'/Association Replacements/',BLOB_FILENAME)
WHERE cd.LEGACY_ORG = 'HWEL'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.FILE_SIZE_BYTES/(1024*1000) >= 200
AND cd.NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 

-- Dummy file is TRUE when use replacenament file
UPDATE CLMS_DOCUMENTS
SET USE_DUMMY_FILE = TRUE
WHERE LEGACY_ORG = 'HWEL'
AND LEGACY_SYSTEM = 'PROCON'
AND REPLACEMENT_FILE IS NOT NULL
AND NEW_DOCUMENT_CATEGORY  != 'Tenders'


--Check CLMS_DOCUMENTS readiness for HWEL before create blob files 
SELECT COUNT(*) 
FROM CLMS_DOCUMENTS cd
WHERE cd.LEGACY_ORG = 'HWEL'
AND cd.LEGACY_SYSTEM = 'PROCON'
AND cd.NEW_DOCUMENT_CATEGORY  != 'Tenders'
AND cd.SELECTED_FOR_MIGRATION 
--AND LEGACY_CONTRACT_REFERENCE IS NULL 
--AND LEGACY_DOC_ID IS NULL
--AND NEW_CONTRACT_TYPE IS NULL
--AND (BLOB_FILENAME IS NULL OR BLOB_PATH IS NULL)
--AND MODIFIED_FILENAME IS NULL 
--AND (S3_PATH IS NULL AND SOURCE_PATH IS NULL)
--AND ((FILE_SIZE_BYTES/1024000)>=200 AND REPLACEMENT_FILE IS NULL)
--AND (REPLACEMENT_FILE IS NOT NULL AND USE_DUMMY_FILE = FALSE)



/*
 * Check for multiple / no Executed Version (pdf) in each Contract
 * TO BE FIXED BEFORE CREATING BLOB FILES
 */
WITH migrated_contracts AS (
	SELECT LEGACY_CONTRACT_REFERENCE, NEW_DOCUMENT_CATEGORY, COUNT(*) count_document
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HWEL'
	AND LEGACY_SYSTEM = 'PROCON'
	AND SELECTED_FOR_MIGRATION 
	GROUP BY LEGACY_CONTRACT_REFERENCE, NEW_DOCUMENT_CATEGORY
),
exec_pdf AS (
	SELECT LEGACY_CONTRACT_REFERENCE, count_document
	FROM migrated_contracts
	WHERE COALESCE(NEW_DOCUMENT_CATEGORY,'') = 'Executed Version (pdf)'
	--AND count_document > 1
), 
amend_var AS (
	SELECT LEGACY_CONTRACT_REFERENCE, count_document
	FROM migrated_contracts
	WHERE COALESCE(NEW_DOCUMENT_CATEGORY,'') = 'Amendments and Variations'
)
-- Check for Contract without an Executed Version (pdf) or Amendment
SELECT 'NO EXECUTED/AMEND' AS CHECK_RESULT, mc.LEGACY_CONTRACT_REFERENCE 
FROM migrated_contracts mc
LEFT JOIN exec_pdf ec  
	ON mc.LEGACY_CONTRACT_REFERENCE=ec.LEGACY_CONTRACT_REFERENCE
WHERE ec.LEGACY_CONTRACT_REFERENCE IS NULL
AND mc.LEGACY_CONTRACT_REFERENCE NOT IN (
	SELECT LEGACY_CONTRACT_REFERENCE FROM amend_var
)
UNION
-- Check for multiple Executed Version (pdf) in each Contract
SELECT 'MULTIPLE EXECUTED PDF' AS CHECK_RESULT, LEGACY_CONTRACT_REFERENCE
FROM exec_pdf
WHERE count_document > 1
ORDER BY 1,2


/*
	Search and update the contract that don't have executed and amend docs (before creating BLOB list)
*/


MERGE INTO CLMS_DOCUMENTS y
USING (	
	WITH migrated_contracts AS (
		SELECT LEGACY_CONTRACT_REFERENCE, NEW_DOCUMENT_CATEGORY, COUNT(*) count_document
		FROM CLMS_DOCUMENTS
		WHERE LEGACY_ORG = 'HWEL'
		AND LEGACY_SYSTEM = 'PROCON'
		AND SELECTED_FOR_MIGRATION 
		GROUP BY LEGACY_CONTRACT_REFERENCE, NEW_DOCUMENT_CATEGORY
	),
	exec_pdf AS (
		SELECT LEGACY_CONTRACT_REFERENCE, count_document
		FROM migrated_contracts
		WHERE COALESCE(NEW_DOCUMENT_CATEGORY,'') = 'Executed Version (pdf)'
	), 
	amend_var AS (
		SELECT LEGACY_CONTRACT_REFERENCE, count_document
		FROM migrated_contracts
		WHERE COALESCE(NEW_DOCUMENT_CATEGORY,'') = 'Amendments and Variations'
	)
	---- main ----
	,contract_docs AS (  
		SELECT DISTINCT c.UID,c.LEGACY_CONTRACT_REFERENCE, c.LEGACY_DOCUMENT_CATEGORY, c.LEGACY_FILENAME, c.LAST_MODIFIED, c.LEGACY_ORG, c.SOURCE_TYPE 
		, CASE 
			WHEN c.LEGACY_DOCUMENT_CATEGORY IN (
				'M001_Contract : Executed version(PDF)', 
				'M002_Amendments and Variations : Amendments', 
				'M002_Amendments and Variations : Variations') THEN '01'
			WHEN c.LEGACY_DOCUMENT_CATEGORY = '01 Library Items' THEN '02'
			WHEN c.LEGACY_DOCUMENT_CATEGORY IN ('03 Internal Communications', '04 External Communications') THEN '03'
		END AS SEARCH_SEQ
		, c.S3_PATH
		, CASE v.CONTRACTTYPE
			WHEN 'Standard' THEN 'Standalone'
			ELSE v.CONTRACTTYPE 
		END AS NEW_CONTRACT_TYPE
		, v.CONTRACT_ADVISER
		FROM CLMS_DOCUMENTS c
		JOIN (
			SELECT RIGHT(EXTRACT_TYPE,4) AS LEGACY_ORG, * 
			FROM (
				SELECT EXTRACT_TYPE, CONTRACTPROCONREFERENCE, CONTRACTTYPE, COALESCE("Contract Specialist_2","C&P Adviser") AS CONTRACT_ADVISER 
				FROM CLEAN_CURRENT_PROCON_PROJECT_DEPTS_POST_AWARDS
				UNION
				SELECT EXTRACT_TYPE, CONTRACTPROCONREFERENCE, CONTRACTTYPE, COALESCE("Contract Specialist_2","C&P Adviser") AS CONTRACT_ADVISER
				FROM CLEAN_CURRENT_PROCON_ORGANISATION_POST_AWARDS
			)
			WHERE EXTRACT_TYPE IN ( 
				SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HWEL_VW UNION 
				SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HBHP_VW
				)
		) v 
		ON c.LEGACY_ORG = v.LEGACY_ORG
		AND c.LEGACY_CONTRACT_REFERENCE = v.CONTRACTPROCONREFERENCE 
		AND c.LEGACY_SYSTEM = 'PROCON'
		AND c.LEGACY_ORG = 'HWEL'
		AND COALESCE(c.NEW_DOCUMENT_CATEGORY,'') != 'Tenders'
		AND c.LEGACY_CONTRACT_REFERENCE IN (
			-- list of search contracts
			SELECT mc.LEGACY_CONTRACT_REFERENCE 
			FROM migrated_contracts mc
			LEFT JOIN exec_pdf ec  
				ON mc.LEGACY_CONTRACT_REFERENCE=ec.LEGACY_CONTRACT_REFERENCE
			WHERE ec.LEGACY_CONTRACT_REFERENCE IS NULL
			AND mc.LEGACY_CONTRACT_REFERENCE NOT IN (SELECT LEGACY_CONTRACT_REFERENCE FROM amend_var)
		)
	)
	,
	non_pdf_docs AS ( 
		SELECT * FROM contract_docs
		WHERE UPPER(RIGHT(LEGACY_FILENAME,3)) = 'PDF' 
		AND UID NOT IN (
			SELECT UID FROM CLMS_DOCUMENTS WHERE SOURCE_TYPE != 'API'
		)
	)
	,
	pdf_docs AS ( 
		SELECT * FROM contract_docs
		WHERE UPPER(RIGHT(LEGACY_FILENAME,3)) = 'PDF' 
		AND UID NOT IN (
			SELECT UID FROM CLMS_DOCUMENTS WHERE SOURCE_TYPE != 'API'
		)
	)
	,
	contracts_with_no_pdf_docs AS(  
		SELECT cd.*
		FROM contract_docs cd 
		LEFT JOIN pdf_docs pd ON cd.LEGACY_CONTRACT_REFERENCE = pd.LEGACY_CONTRACT_REFERENCE
		WHERE pd.LEGACY_CONTRACT_REFERENCE IS NULL
	)
	,
	docs_include_selection_logics AS (
		SELECT *, 
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%Frame Agreement%', '%Contract %Signed%', '%Executed%Contract %') 
			THEN TRUE ELSE FALSE END AS HAS_PRIORITY_KEYWORD,
				
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%EXECUTED%', '%EXCECUTED%', '%CONTRACT %', '%AGREEMENT%', '%-CA-%')
			AND NOT LEGACY_FILENAME ILIKE ANY ('%Contract Strategy%', '%Contract Management%', '%Contract Close%', '%Contract Ext%', '%Contract Price%','%Contract Status Form%', '%Supplement%Agreement%' )
			THEN TRUE ELSE FALSE END AS Executed,
	
			CASE WHEN LEGACY_FILENAME ILIKE ANY ('%AMEND%') 
			THEN TRUE ELSE FALSE END AS Amendment,
		
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%VARIATI%', '%VARAITION%') 
			THEN TRUE ELSE FALSE END AS Variation,	
			
		CASE WHEN LEGACY_FILENAME LIKE ANY ('%CAF%', '%ACE%', '%AFC%', '%Authority for Contract Execution%', '%Contract Approval Form%', '%Authority to Execute Contract%' ) 
				AND NOT LEGACY_FILENAME ILIKE ANY ('%MACE%', '%SURFACE%', '%SARACEN%')
			THEN TRUE ELSE FALSE END AS CAF,	
			
		CASE WHEN LEGACY_FILENAME ILIKE ANY (
			'%REPORT %', '%LETTER%', '%ORDER FORM%', '%SOW Template%', '%MINUTES%', '%APPENDIX%', '%QUESTION%', '%Implement%Matrix%', 
			'%Change in%', '%Change of%', '%Update of%', '%Extract from%', '%Confirmation of matters%', '%sponsor approval%', 
			'%audit response%', '%novation agreement%', '%draft%', '%email%', '%checklist%', '%noti% of%', '%noti% to%', '%clari% register%',
			'%comment%', '%to approve%', '%contract details form%')
			THEN TRUE ELSE FALSE END AS Excluded,		
				
		CASE WHEN LEGACY_DOCUMENT_CATEGORY ILIKE ('%Risk Covers%') THEN TRUE ELSE FALSE END AS Risk_Covers,
		CASE WHEN LEGACY_DOCUMENT_CATEGORY ILIKE ('%Communication%') THEN TRUE ELSE FALSE END AS Communication,		
		FROM pdf_docs	
	)
	,
	docs_with_priority AS (
		SELECT *, 
		ROW_NUMBER() 
			OVER(PARTITION BY LEGACY_ORG, LEGACY_CONTRACT_REFERENCE 
					ORDER BY LEGACY_ORG, LEGACY_CONTRACT_REFERENCE, EXCLUDED, HAS_PRIORITY_KEYWORD DESC, SEARCH_SEQ, Executed DESC, LAST_MODIFIED DESC) 
		AS PRIORITY_ORDER
		FROM docs_include_selection_logics
	)
	, amend_var_docs AS (
		SELECT 'Amendments and Variations' AS DOC_CAT, * 
		FROM docs_with_priority 
		WHERE (AMENDMENT OR VARIATION)
		AND NOT CAF
		AND NOT EXCLUDED
	)
	, exec_docs AS (
		SELECT 'Executed Version (pdf)' AS DOC_CAT, * 
		FROM docs_with_priority 
		WHERE EXECUTED 
		--AND PRIORITY_ORDER = 1
		AND NOT EXCLUDED
		AND NOT AMENDMENT
		AND NOT VARIATION
		AND NOT CAF
		AND NOT COMMUNICATION
	),
	search_result AS (
		SELECT * FROM exec_docs UNION
		SELECT * FROM amend_var_docs
	),
	search_result_priority AS (
		SELECT LEGACY_CONTRACT_REFERENCE, DOC_CAT, MIN(PRIORITY_ORDER) priority
		FROM search_result
		WHERE DOC_CAT = 'Executed Version (pdf)'
		GROUP BY LEGACY_CONTRACT_REFERENCE, DOC_CAT
	),
	docs_tobe_updated AS (
		SELECT sr.UID, sr.LEGACY_CONTRACT_REFERENCE, sr.DOC_CAT
		--, sr.NEW_CONTRACT_TYPE, sr.LEGACY_DOCUMENT_CATEGORY, sr.LEGACY_FILENAME, sr.S3_PATH,  
		FROM search_result sr 
		LEFT JOIN search_result_priority srp
			ON sr.LEGACY_CONTRACT_REFERENCE = srp.LEGACY_CONTRACT_REFERENCE
			AND sr.DOC_CAT = srp.DOC_CAT
			AND sr.PRIORITY_ORDER = srp.PRIORITY
		WHERE (srp.LEGACY_CONTRACT_REFERENCE IS NOT NULL OR sr.DOC_CAT = 'Amendments and Variations')
		--ORDER BY sr.LEGACY_CONTRACT_REFERENCE, sr.DOC_CAT
	)
	SELECT * FROM docs_tobe_updated
	/*
		SELECT y.*, x.* 
		FROM CLMS_DOCUMENTS y 
		JOIN docs_tobe_updated x
		ON y.UID = x.UID
	*/
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 
y.NEW_DOCUMENT_CATEGORY = x.DOC_CAT
, y.BLOB_PATH = 
	CASE NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		WHEN 'Master Service Agreement' THEN  'Master Service Agreement(MSA)'
		END || CONCAT('/',x.DOC_CAT,'/')

-- adjustments
UPDATE CLMS_DOCUMENTS 
SET ZIP_FILENAME = NULL
WHERE ZIP_FILENAME IS NOT NULL 
AND NEW_DOCUMENT_CATEGORY IN ('Amendments and Variations', 'Executed Version (pdf)')

-- ALl files (comms) that packaged in ZIP file WILL have SELECTED_FOR_MIGRATION = FALSE
--SELECT * FROM 
UPDATE
CLMS_DOCUMENTS 
SET SELECTED_FOR_MIGRATION = FALSE
WHERE LEGACY_SYSTEM = 'PROCON'
AND LEGACY_ORG = 'HWEL'
AND ZIP_FILENAME  IN ( 
	SELECT MODIFIED_FILENAME  
	FROM CLMS_DOCUMENTS 
	WHERE LEGACY_SYSTEM = 'PROCON'
	AND LEGACY_ORG = 'HWEL'
	AND SOURCE_TYPE = 'ZIP'
)



---- HWEL BLOB
WITH blob AS (
	/* to move the files as it is */
	SELECT S3_PATH AS SOURCE_PATH , CONCAT(BLOB_PATH,BLOB_FILENAME) AS Target_Path, 1 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HWEL'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND NEW_DOCUMENT_CATEGORY  != 'Tenders'
	AND SELECTED_FOR_MIGRATION 
	AND NOT USE_DUMMY_FILE
	UNION
	/* to move original files to replacement folder */
	SELECT S3_PATH AS SOURCE_PATH , REPLACEMENT_FILE AS Target_Path, 2 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HWEL'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND NEW_DOCUMENT_CATEGORY  != 'Tenders'
	AND SELECTED_FOR_MIGRATION 
	AND USE_DUMMY_FILE
	UNION
	/* to create dummy files for file gt 200 MB to document blob folder */
	SELECT CASE 
		WHEN UPPER(RIGHT(S3_PATH,3)) = 'PDF' THEN 'scripts/dummy_file.pdf' 
		WHEN UPPER(RIGHT(S3_PATH,3)) = 'ZIP' THEN 'scripts/dummy_file.zip' 	
		WHEN UPPER(RIGHT(S3_PATH,4)) = 'DOCX' THEN 'scripts/dummy_file.docx' 	
		WHEN UPPER(RIGHT(S3_PATH,4)) = 'PPTX' THEN 'scripts/dummy_file.pptx' 			
	END AS SOURCE_PATH 
	, CONCAT(BLOB_PATH,BLOB_FILENAME) AS Target_Path , 3 ID, UID 
	FROM CLMS_DOCUMENTS
	WHERE LEGACY_ORG = 'HWEL'
	AND LEGACY_SYSTEM = 'PROCON' 	
	AND NEW_DOCUMENT_CATEGORY  != 'Tenders'
	AND SELECTED_FOR_MIGRATION 
	AND USE_DUMMY_FILE
	AND (FILE_SIZE_BYTES / (1024 * 1000)) >= 200
)
SELECT REPLACE(REPLACE(SOURCE_PATH, 'procon-hwel-extract/','procon-hwel/'),'scripts/','') AS "SourceFilePath" , 
CONCAT('blob/procon-hwel/',TARGET_PATH) AS "TargetFilePath", 
ID, UID 
FROM blob;

-- TOBE CHECKED and re-extracted once access to hwel is back - update the SELECTED_FOR_MIGRATION = TRUE
SELECT * FROM CLMS_DOCUMENTS
--UPDATE CLMS_DOCUMENTS
--SET SELECTED_FOR_MIGRATION = FALSE
WHERE LEGACY_ORG = 'HWEL' 
AND LEGACY_SYSTEM = 'PROCON'
AND NEW_DOCUMENT_CATEGORY != 'Tenders'
AND LEGACY_CONTRACT_REFERENCE = '4650000611'
AND SOURCE_TYPE = 'API'
AND LEGACY_DOCUMENT_CATEGORY = '01 Library Items'



-- Only migrate supported file extension 
UPDATE CLMS_DOCUMENTS 
SET SELECTED_FOR_MIGRATION = FALSE
WHERE (RIGHT(LOWER(LEGACY_FILENAME),3) NOT IN (
'pdf','doc','xls','tif','jpg','png','zip','msg','ppt','txt','gif','cad','dot','xps','mht','htm','rtf','odt','csv','oft','xml','hwp')
AND RIGHT(LOWER(LEGACY_FILENAME),4) NOT IN ( 'docx','xlsx','tiff','jpeg','pptx','dotx','html')
AND RIGHT(LOWER(LEGACY_FILENAME),5) NOT IN ('mhtml')
)
AND SELECTED_FOR_MIGRATION



/*
	UPDATE Amendmen files located in Legacy Comms
*/

MERGE INTO CLMS_DOCUMENTS y
USING (	
	WITH 
	contract_docs AS (  
		SELECT DISTINCT c.UID,c.LEGACY_CONTRACT_REFERENCE, c.LEGACY_DOCUMENT_CATEGORY, c.LEGACY_FILENAME, c.LAST_MODIFIED, c.LEGACY_ORG, c.SOURCE_TYPE 
		, CASE 
			WHEN c.LEGACY_DOCUMENT_CATEGORY IN (
				'M001_Contract : Executed version(PDF)', 
				'M002_Amendments and Variations : Amendments', 
				'M002_Amendments and Variations : Variations') THEN '01'
			WHEN c.LEGACY_DOCUMENT_CATEGORY = '01 Library Items' THEN '02'
			WHEN c.LEGACY_DOCUMENT_CATEGORY IN ('03 Internal Communications', '04 External Communications') THEN '03'
		END AS SEARCH_SEQ
		, c.S3_PATH
		, CASE v.CONTRACTTYPE
			WHEN 'Standard' THEN 'Standalone'
			ELSE v.CONTRACTTYPE 
		END AS NEW_CONTRACT_TYPE
		, v.CONTRACT_ADVISER
		FROM CLMS_DOCUMENTS c
		JOIN (
			SELECT RIGHT(EXTRACT_TYPE,4) AS LEGACY_ORG, * 
			FROM (
				SELECT EXTRACT_TYPE, CONTRACTPROCONREFERENCE, CONTRACTTYPE, COALESCE("Contract Specialist_2","C&P Adviser") AS CONTRACT_ADVISER 
				FROM CLEAN_CURRENT_PROCON_PROJECT_DEPTS_POST_AWARDS
				UNION
				SELECT EXTRACT_TYPE, CONTRACTPROCONREFERENCE, CONTRACTTYPE, COALESCE("Contract Specialist_2","C&P Adviser") AS CONTRACT_ADVISER
				FROM CLEAN_CURRENT_PROCON_ORGANISATION_POST_AWARDS
			)
			WHERE EXTRACT_TYPE IN ( 
				SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HWEL_VW UNION 
				SELECT EXTRACT_TYPE FROM LATEST_EXTRACT_PROCON_HBHP_VW
				)
		) v 
		ON c.LEGACY_ORG = v.LEGACY_ORG
		AND c.LEGACY_CONTRACT_REFERENCE = v.CONTRACTPROCONREFERENCE 
		AND c.LEGACY_SYSTEM = 'PROCON'
		--AND c.LEGACY_ORG = 'HWEL'
		AND COALESCE(c.NEW_DOCUMENT_CATEGORY,'') != 'Tenders'
	)
	,
	non_pdf_docs AS ( 
		SELECT * FROM contract_docs
		WHERE UPPER(RIGHT(LEGACY_FILENAME,3)) = 'PDF' 
		AND UID NOT IN (
			SELECT UID FROM CLMS_DOCUMENTS WHERE SOURCE_TYPE != 'API'
		)
	)
	,
	pdf_docs AS ( 
		SELECT * FROM contract_docs
		WHERE UPPER(RIGHT(LEGACY_FILENAME,3)) = 'PDF' 
		AND UID NOT IN (
			SELECT UID FROM CLMS_DOCUMENTS WHERE SOURCE_TYPE != 'API'
		)
	)
	,
	contracts_with_no_pdf_docs AS(  
		SELECT cd.*
		FROM contract_docs cd 
		LEFT JOIN pdf_docs pd ON cd.LEGACY_CONTRACT_REFERENCE = pd.LEGACY_CONTRACT_REFERENCE
		WHERE pd.LEGACY_CONTRACT_REFERENCE IS NULL
	)
	,
	docs_include_selection_logics AS (
		SELECT *, 
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%Frame Agreement%', '%Contract %Signed%', '%Executed%Contract %') 
			THEN TRUE ELSE FALSE END AS HAS_PRIORITY_KEYWORD,
				
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%EXECUTED%', '%EXCECUTED%', '%CONTRACT %', '%AGREEMENT%')
			AND NOT LEGACY_FILENAME ILIKE ANY ('%Contract Strategy%', '%Contract Management%', '%Contract Close%', '%Contract Ext%', '%Contract Price%','%Contract Status Form%', '%Supplement%Agreement%' )
			THEN TRUE ELSE FALSE END AS Executed,
	
			CASE WHEN LEGACY_FILENAME ILIKE ANY ('%AMEND%') 
			THEN TRUE ELSE FALSE END AS Amendment,
		
		CASE WHEN LEGACY_FILENAME ILIKE ANY ('%VARIATI%', '%VARAITION%') 
			THEN TRUE ELSE FALSE END AS Variation,	
			
		CASE WHEN LEGACY_FILENAME LIKE ANY ('%CAF%', '%ACE%', '%AFC%', '%Authority for Contract Execution%', '%Contract Approval Form%', '%Authority to Execute Contract%' ) 
				AND NOT LEGACY_FILENAME ILIKE ANY ('%MACE%', '%SURFACE%', '%SARACEN%')
			THEN TRUE ELSE FALSE END AS CAF,	
			
		CASE WHEN LEGACY_FILENAME ILIKE ANY (
			'%REPORT %', '%LETTER%', '%ORDER FORM%', '%SOW Template%', '%MINUTES%', '%APPENDIX%', '%QUESTION%', '%Implement%Matrix%', 
			'%Change in%', '%Change of%', '%Update of%', '%Extract from%', '%Confirmation of matters%', '%sponsor approval%', 
			'%audit response%', '%novation agreement%', '%draft%', '%email%', '%checklist%', '%noti% of%', '%noti% to%', '%clari% register%',
			'%comment%', '%to approve%', '%contract details form%')
			THEN TRUE ELSE FALSE END AS Excluded,		
				
		CASE WHEN LEGACY_DOCUMENT_CATEGORY ILIKE ('%Risk Covers%') THEN TRUE ELSE FALSE END AS Risk_Covers,
		CASE WHEN LEGACY_DOCUMENT_CATEGORY ILIKE ('%Communication%') THEN TRUE ELSE FALSE END AS Communication,		
		FROM pdf_docs	
	)
	,
	docs_with_priority AS (
		SELECT *, 
		ROW_NUMBER() 
			OVER(PARTITION BY LEGACY_ORG, LEGACY_CONTRACT_REFERENCE 
					ORDER BY LEGACY_ORG, LEGACY_CONTRACT_REFERENCE, EXCLUDED, HAS_PRIORITY_KEYWORD DESC, SEARCH_SEQ, Executed DESC, LAST_MODIFIED DESC) 
		AS PRIORITY_ORDER
		FROM docs_include_selection_logics
	)
	, amend_var_docs AS (
		SELECT 'Amendments and Variations' AS DOC_CAT, * 
		FROM docs_with_priority 
		WHERE (AMENDMENT OR VARIATION)
		AND NOT CAF
		AND NOT EXCLUDED
	)
	, exec_docs AS (
		SELECT 'Executed Version (pdf)' AS DOC_CAT, * 
		FROM docs_with_priority 
		WHERE EXECUTED 
		--AND PRIORITY_ORDER = 1
		AND NOT EXCLUDED
		AND NOT AMENDMENT
		AND NOT VARIATION
		AND NOT CAF
		AND NOT COMMUNICATION
	)
	--SELECT COUNT(DISTINCT cd.LEGACY_CONTRACT_REFERENCE), COUNT(DISTINCT cd.MODIFIED_FILENAME) 
	SELECT cd.UID, cd.LEGACY_SYSTEM, cd.LEGACY_ORG, cd.BLOB_PATH || cd.BLOB_FILENAME AS OLD_BLOB_PATH
		, CASE cd.NEW_CONTRACT_TYPE 
		WHEN 'Standalone' THEN 'Standalone(SA)'
		WHEN 'Standard' THEN 'Standalone(SA)'
		WHEN 'Framework' THEN 'Framework(FA)'
		WHEN 'CallOff' THEN 'CallOff(CO)'
		WHEN 'Master Service Agreement' THEN  'Master Service Agreement(MSA)'
		END || '/Amendments and Variations/' AS NEW_BLOB_PATH
	FROM CLMS_DOCUMENTS cd
	JOIN amend_var_docs av 
		ON cd.UID=av.UID
	WHERE cd.NEW_DOCUMENT_CATEGORY != 'Amendments and Variations'
	AND cd.SELECTED_FOR_MIGRATION
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
	y.NEW_DOCUMENT_CATEGORY = 'Amendments and Variations'
	, y.BLOB_PATH = x.NEW_BLOB_PATH
	
	
/* GCMS selected_for_migration update */	
	
MERGE INTO CLMS_DOCUMENTS y
USING (	
 SELECT cd.UID --COUNT(DISTINCT cd.LEGACY_CONTRACT_REFERENCE  )
 FROM CLMS_DOCUMENTS cd
 JOIN GCMS_VALID_CONTRACTS_VW gv 
 	ON cd.LEGACY_CONTRACT_REFERENCE = gv.CONTRACT_REFERENCE_CODE 
 JOIN LATEST_EXTRACT_GCMS_VW gl  
 	ON gl.EXTRACT_TYPE = gv.EXTRACT_TYPE 
 WHERE cd.LEGACY_SYSTEM = 'GCMS'
 	AND cd.LEGACY_ORG = 'HBHP'
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
	y.SELECTED_FOR_MIGRATION = TRUE ;
	

/* GCMS selected_for_migration update - for duplicate documents*/		
MERGE INTO CLMS_DOCUMENTS y
USING (	
	WITH gcms_duplicate_docs AS (
		SELECT 
			LEGACY_CONTRACT_REFERENCE, LEGACY_FILENAME, 
				COALESCE(NEW_DOCUMENT_CATEGORY,'') AS NEW_DOCUMENT_CATEGORY, 
				FILE_SIZE_BYTES, 
				COUNT(*) AS COUNT_DUPLICATE, 
				MAX(LEGACY_DOC_ID) AS LEGACY_DOC_ID
		FROM CLMS_DOCUMENTS 
		WHERE LEGACY_SYSTEM = 'GCMS'
		AND LEGACY_CONTRACT_REFERENCE IN (
			SELECT CONTRACT_REFERENCE_CODE 
			FROM GCMS_VALID_CONTRACTS_VW
		)
		GROUP BY LEGACY_CONTRACT_REFERENCE, LEGACY_FILENAME, COALESCE(NEW_DOCUMENT_CATEGORY,''), FILE_SIZE_BYTES
		HAVING COUNT(*) > 1
	)
	SELECT UID 
	FROM CLMS_DOCUMENTS cd 
	JOIN gcms_duplicate_docs gd 
		ON cd.LEGACY_CONTRACT_REFERENCE = gd.LEGACY_CONTRACT_REFERENCE
		AND cd.LEGACY_FILENAME = gd.LEGACY_FILENAME
		AND cd.NEW_DOCUMENT_CATEGORY = gd.NEW_DOCUMENT_CATEGORY
		AND cd.FILE_SIZE_BYTES = gd.FILE_SIZE_BYTES
		--AND cd.LEGACY_DOC_ID = gd.LEGACY_DOC_ID  -- selected_for_migration
		AND cd.LEGACY_DOC_ID <> gd.LEGACY_DOC_ID  -- not selected_for_migration
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
	y.SELECTED_FOR_MIGRATION = FALSE	
	
	
 	

/* GCMS NEW_CONTRACT_TYPE update using dashboard */	
 
MERGE INTO CLMS_DOCUMENTS y
USING (	
 WITH dashboard AS (
	 SELECT GCMS_CONTRACT_NO::TEXT AS GCMS_CONTRACT_NO, 
	 CASE NEW_CONTRACT_TYPE_ICERTIS 
	 WHEN 'legacy msa'  THEN 'Master Service Agreement'
	 WHEN 'frame agreement' THEN 'Framework'
	 WHEN 'standalone agreement' THEN 'Standalone'
	 WHEN 'call-off' THEN 'CallOff'
	 ELSE NULL END AS NEW_CONTRACT_TYPE 
	 FROM EXTERNAL_CATEGORY_DASHBOARD_GCMS
	 WHERE NEW_CONTRACT_TYPE_ICERTIS IS NOT NULL
 )
 SELECT cd.UID, db.NEW_CONTRACT_TYPE
 FROM CLMS_DOCUMENTS cd
 JOIN dashboard db
 	ON cd.LEGACY_CONTRACT_REFERENCE = db.GCMS_CONTRACT_NO
 WHERE cd.LEGACY_SYSTEM = 'GCMS'
 AND cd.NEW_CONTRACT_TYPE IS NULL
) x
ON x.UID = y.UID	
WHEN MATCHED THEN UPDATE SET 	
	y.NEW_CONTRACT_TYPE = x.NEW_CONTRACT_TYPE
	
/*
	
	GCMS Update Blob path from 12 excuted pdf docs that was incorrectly located in Supporting

*/

MERGE INTO CLMS_DOCUMENTS y
USING (	
	WITH recommended_category AS (
		SELECT UID, LEGACY_CONTRACT_REFERENCE, LEGACY_FILENAME, RECOMMENDED_DOCUMENT_CATEGORY
		FROM TABLE(get_new_doc_category('GCMS', 'HBHP')) 
		WHERE SUPPORTED_FILE_EXT
		AND RECOMMENDED_DOCUMENT_CATEGORY = 'Executed Version (pdf)'
	),
	gcms_with_executed_doc AS (
		SELECT DISTINCT LEGACY_CONTRACT_REFERENCE 
		FROM CLMS_DOCUMENTS 
		WHERE LEGACY_SYSTEM = 'GCMS'
		AND SELECTED_FOR_MIGRATION
		AND NEW_DOCUMENT_CATEGORY = 'Executed Version (pdf)'
	)
	SELECT cd.uid, cd.MODIFIED_FILENAME, cd.NEW_DOCUMENT_CATEGORY, rc.RECOMMENDED_DOCUMENT_CATEGORY, cd.BLOB_FILENAME, cd.BLOB_PATH , cd.s3_path,
	REPLACE(cd.BLOB_PATH,cd.NEW_DOCUMENT_CATEGORY, rc.RECOMMENDED_DOCUMENT_CATEGORY) AS NEW_BLOB_PATH
	FROM CLMS_DOCUMENTS cd
	JOIN recommended_category rc
		ON cd.UID = rc.UID
		AND cd.SELECTED_FOR_MIGRATION
		AND cd.NEW_DOCUMENT_CATEGORY = 'Supporting Documents'
	WHERE cd.NEW_DOCUMENT_CATEGORY <> rc.RECOMMENDED_DOCUMENT_CATEGORY
	AND cd.LEGACY_CONTRACT_REFERENCE NOT IN (
			SELECT LEGACY_CONTRACT_REFERENCE 
			FROM gcms_with_executed_doc
		)
	AND cd.UID NOT IN (1362610) -- manual upload marked AS NOT executed
	ORDER BY cd.LEGACY_CONTRACT_REFERENCE, cd.LEGACY_DOC_ID
) x
ON x.UID = y.UID
WHEN MATCHED THEN UPDATE SET 
y.BLOB_PATH =  x.NEW_BLOB_PATH	,
y.NEW_DOCUMENT_CATEGORY =  'Executed Version (pdf)'
	

/* check inconsistency between NEW_DOCUMENT_CATEGORY and BLOB_PATH */
SELECT 
UID,
NEW_DOCUMENT_CATEGORY, 
REPLACE(
	REPLACE(
		REPLACE(
			REPLACE(
				REPLACE(BLOB_PATH, 'Framework(FA)',''),'CallOff(CO)',''),'Standalone(SA)',''),'Master Service Agreement(MSA)',''),'/','') AS NEW_DOC_CAT
FROM CLMS_DOCUMENTS 
WHERE NEW_DOCUMENT_CATEGORY <> 
REPLACE(
	REPLACE(
		REPLACE(
			REPLACE(
				REPLACE(BLOB_PATH, 'Framework(FA)',''),'CallOff(CO)',''),'Standalone(SA)',''),'Master Service Agreement(MSA)',''),'/','')
				

	
	
/*

GCMS files manual extract. 
In this case, adviser provide the files via network / sharepoint.

*/

-- add the files into GCMS_FILES_3. this table holds the list of GCSM documents provided by Jaggaer. It was generated from the file list.
INSERT INTO GCMS_FILES_3
(ID, FILENAME, S3_PATH, FILE_SIZE_BYTES)
VALUES
('421342', '9100072784_01. Commercial Agreement 9100072784 - RPS - Metocean Survey - Executed.pdf', 'gcms-hbhp/manual-extract/9100072784_01. Commercial Agreement 9100072784 - RPS - Metocean Survey - Executed.pdf', '101125019'),
('421343', '9100072784_02. Amendment No. 1 - RPS - Metocean - Executed.pdf', 'gcms-hbhp/manual-extract/9100072784_02. Amendment No. 1 - RPS - Metocean - Executed.pdf', '902424'),
('421344', '9100072784_03. Amendment No. 2 - RPS - Metocean - Executed.pdf', 'gcms-hbhp/manual-extract/9100072784_03. Amendment No. 2 - RPS - Metocean - Executed.pdf', '545669'),
('421345', '9100072784_04. Amendment No. 3 - RPS - Metocean - Executed.pdf', 'gcms-hbhp/manual-extract/9100072784_04. Amendment No. 3 - RPS - Metocean - Executed.pdf', '246652');

SELECT * FROM GCMS_FILES_3
WHERE ID IN ('421342','421343','421344','421345')

-- insert the documents into clms_documents
INSERT INTO SANDBOX.PROJECT_ICLMS.CLMS_DOCUMENTS
(LEGACY_CONTRACT_REFERENCE, LEGACY_DOC_ID, LEGACY_FILENAME, LEGACY_SYSTEM, LEGACY_ORG, SOURCE_TYPE, LEGACY_DOCUMENT_CATEGORY, 
NEW_DOCUMENT_CATEGORY, NEW_CONTRACT_TYPE, SELECTED_FOR_MIGRATION, MODIFIED_FILENAME, BLOB_FILENAME, 
S3_PATH, BLOB_PATH, FILE_SIZE_BYTES, LATEST_VERSION, LAST_MODIFIED, USE_DUMMY_FILE)
SELECT 
'9100072784', ID, FILENAME, 'GCMS', 'HBHP', 'WOODSIDE', 'CLMS', 
'Executed Version (pdf)', 'Framework', true, FILENAME, NULL, 
S3_PATH, 'Framework(FA)/Executed Version (pdf)/', FILE_SIZE_BYTES::NUMBER, 
true, CURRENT_TIMESTAMP,  false 
FROM GCMS_FILES_3
WHERE ID IN ('421342','421343','421344','421345');

-- update blob_filename
UPDATE SANDBOX.PROJECT_ICLMS.CLMS_DOCUMENTS
SET BLOB_FILENAME = CONCAT('Uid',UID,'_',MODIFIED_FILENAME)
WHERE LEGACY_SYSTEM = 'GCMS'
AND LEGACY_CONTRACT_REFERENCE = '9100072784'
AND LEGACY_DOC_ID IN ('421342');

-- update document category and blob_path
UPDATE SANDBOX.PROJECT_ICLMS.CLMS_DOCUMENTS
SET BLOB_FILENAME = CONCAT('Uid',UID,'_',MODIFIED_FILENAME)
, NEW_DOCUMENT_CATEGORY = 'Amendments and Variations'
, BLOB_PATH = 'Framework(FA)/Amendments and Variations/'
WHERE LEGACY_SYSTEM = 'GCMS'
AND LEGACY_CONTRACT_REFERENCE = '9100072784'
AND LEGACY_DOC_ID IN ('421343','421344','421345');

-- check result
SELECT * FROM CLMS_DOCUMENTS
WHERE LEGACY_SYSTEM = 'GCMS'
AND LEGACY_CONTRACT_REFERENCE = '9100072784'
AND LEGACY_DOC_ID IN ('421342','421343','421344','421345')

------------------------------------------

Delivery Development Process Part 2 - from SANDBOX to TEST (DBT/GitHub Actions)
https://confluence.woodside.com.au/pages/viewpage.action?pageId=136226202
